var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"cmp","","",3,null],[11,"eq","","",3,null],[11,"partial_cmp","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"hash","","",4,null],[11,"cmp","","",4,null],[11,"eq","","",4,null],[11,"partial_cmp","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["chrono"] = {"doc":"# Chrono 0.3.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",1,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don&#39;t need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",2,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",2,null],[11,"offset_from_local_datetime","","",2,null],[11,"offset_from_utc_date","","",2,null],[11,"offset_from_utc_datetime","","",2,null],[11,"fix","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",3,null],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",3,null],[11,"from_offset","","",3,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",3,null],[11,"offset_from_local_datetime","","",3,null],[11,"offset_from_utc_date","","",3,null],[11,"offset_from_utc_datetime","","",3,null],[11,"fix","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",4,null],[11,"today","","Returns a `Date` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",4,null],[11,"offset_from_local_datetime","","",4,null],[11,"offset_from_utc_date","","",4,null],[11,"offset_from_utc_datetime","","",4,null],[11,"from_local_date","","",4,null],[11,"from_local_datetime","","",4,null],[11,"from_utc_date","","",4,null],[11,"from_utc_datetime","","",4,null],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",5,null],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,null],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,null],[11,"yo","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,null],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,null],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",6,null],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",6,null],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",6,null],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",6,null],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",6,null],[10,"from_offset","","Reconstructs the time zone from the offset.",6,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,null],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,null],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,null],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,null],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,null],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,null],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,null],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,null],[11,"map","","Maps a `LocalResult&lt;T&gt;` into `LocalResult&lt;U&gt;` with given function.",1,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",1,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",1,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",1,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",1,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",1,null],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,null],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every [proleptic Gregorian date](./index.html#calendar-date)\nfrom Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"cmp","","",7,null],[11,"clone","","",7,null],[11,"from_ymd","","Makes a new `NaiveDate` from the [calendar date](./index.html#calendar-date)\n(year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the [calendar date](./index.html#calendar-date)\n(year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the [ordinal date](./index.html#ordinal-date)\n(year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the [ordinal date](./index.html#ordinal-date)\n(year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the [ISO week date](./index.html#week-date)\n(year, week number and day of the week).\nThe resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the [ISO week date](./index.html#week-date)\n(year, week number and day of the week).\nThe resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",7,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,null],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,null],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,null],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,null],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,null],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,null],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,null],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,null],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,null],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,null],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,null],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,null],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,null],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",7,null],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",7,null],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date.\nReturns a `Duration` of integral numbers.",7,null],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",7,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",7,null],[11,"year","","Returns the year number in the [calendar date](./index.html#calendar-date).",7,null],[11,"month","","Returns the month number starting from 1.",7,null],[11,"month0","","Returns the month number starting from 0.",7,null],[11,"day","","Returns the day of month starting from 1.",7,null],[11,"day0","","Returns the day of month starting from 0.",7,null],[11,"ordinal","","Returns the day of year starting from 1.",7,null],[11,"ordinal0","","Returns the day of year starting from 0.",7,null],[11,"weekday","","Returns the day of week.",7,null],[11,"isoweekdate","","",7,null],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,null],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,null],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,null],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,null],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,null],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,null],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,null],[11,"hash","","",7,null],[11,"add","","",7,null],[11,"sub","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time,\nand also returns the number of *seconds*\nin the integral number of days ignored from the addition.\n(We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time,\nand also returns the number of *seconds*\nin the integral number of days ignored from the subtraction.\n(We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time.\nReturns a `Duration` within +/- 1 day.\nThis does not overflow or underflow at all.",8,null],[11,"format_with_items","","Formats the time with the specified formatting items.\nOtherwise it is same to the ordinary [`format`](#method.format) method.",8,null],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",8,null],[11,"hour","","Returns the hour number from 0 to 23.",8,null],[11,"minute","","Returns the minute number from 0 to 59.",8,null],[11,"second","","Returns the second number from 0 to 59.",8,null],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](./naive/time/index.html#leap-second-handling).",8,null],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,null],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,null],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,null],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,null],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,null],[11,"hash","","",8,null],[11,"add","","",8,null],[11,"sub","","",8,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"cmp","","",9,null],[11,"clone","","",9,null],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to [`date.and_time(time)`](../date/struct.NaiveDate.html#method.and_time)\nand many other helper constructors on `NaiveDate`.",9,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time,\nfrom the number of non-leap seconds\nsince the midnight UTC on January 1, 1970 (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time,\nfrom the number of non-leap seconds\nsince the midnight UTC on January 1, 1970 (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",9,null],[11,"time","","Retrieves a time component.",9,null],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,null],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,null],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,null],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,null],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",9,null],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",9,null],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time.\nThis does not overflow or underflow at all.",9,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.\nOtherwise it is same to the ordinary [`format`](#method.format) method.",9,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",9,null],[11,"year","","Returns the year number in the [calendar date](./index.html#calendar-date).",9,null],[11,"month","","Returns the month number starting from 1.",9,null],[11,"month0","","Returns the month number starting from 0.",9,null],[11,"day","","Returns the day of month starting from 1.",9,null],[11,"day0","","Returns the day of month starting from 0.",9,null],[11,"ordinal","","Returns the day of year starting from 1.",9,null],[11,"ordinal0","","Returns the day of year starting from 0.",9,null],[11,"weekday","","Returns the day of week.",9,null],[11,"isoweekdate","","",9,null],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,null],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,null],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,null],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,null],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,null],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,null],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,null],[11,"hour","","Returns the hour number from 0 to 23.",9,null],[11,"minute","","Returns the minute number from 0 to 59.",9,null],[11,"second","","Returns the second number from 0 to 59.",9,null],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](./naive/time/index.html#leap-second-handling).",9,null],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,null],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,null],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,null],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,null],[11,"hash","","",9,null],[11,"add","","",9,null],[11,"sub","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",10,null],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",10,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",10,null],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",10,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",10,null],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,null],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,null],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",10,null],[11,"succ","","Makes a new `Date` for the next date.",10,null],[11,"succ_opt","","Makes a new `Date` for the next date.",10,null],[11,"pred","","Makes a new `Date` for the prior date.",10,null],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,null],[11,"offset","","Retrieves an associated offset from UTC.",10,null],[11,"timezone","","Retrieves an associated time zone.",10,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",10,null],[11,"checked_add_signed","","Adds given `Duration` to the current date.",10,null],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",10,null],[11,"signed_duration_since","","Subtracts another `Date` from the current date.\nReturns a `Duration` of integral numbers.",10,null],[11,"naive_utc","","Returns a view to the naive UTC date.",10,null],[11,"naive_local","","Returns a view to the naive local date.",10,null],[11,"format_with_items","","Formats the date with the specified formatting items.",10,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",10,null],[11,"year","","",10,null],[11,"month","","",10,null],[11,"month0","","",10,null],[11,"day","","",10,null],[11,"day0","","",10,null],[11,"ordinal","","",10,null],[11,"ordinal0","","",10,null],[11,"weekday","","",10,null],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,null],[11,"with_month","","",10,null],[11,"with_month0","","",10,null],[11,"with_day","","",10,null],[11,"with_day0","","",10,null],[11,"with_ordinal","","",10,null],[11,"with_ordinal0","","",10,null],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"cmp","","",10,null],[11,"hash","","",10,null],[11,"add","","",10,null],[11,"sub","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",11,null],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",11,null],[11,"date","","Retrieves a date component.",11,null],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",11,null],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).",11,null],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,null],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,null],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,null],[11,"offset","","Retrieves an associated offset from UTC.",11,null],[11,"timezone","","Retrieves an associated time zone.",11,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",11,null],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",11,null],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",11,null],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time.\nThis does not overflow or underflow at all.",11,null],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,null],[11,"naive_local","","Returns a view to the naive local datetime.",11,null],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,null],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",11,null],[11,"year","","",11,null],[11,"month","","",11,null],[11,"month0","","",11,null],[11,"day","","",11,null],[11,"day0","","",11,null],[11,"ordinal","","",11,null],[11,"ordinal0","","",11,null],[11,"weekday","","",11,null],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,null],[11,"with_month","","",11,null],[11,"with_month0","","",11,null],[11,"with_day","","",11,null],[11,"with_day0","","",11,null],[11,"with_ordinal","","",11,null],[11,"with_ordinal0","","",11,null],[11,"hour","","",11,null],[11,"minute","","",11,null],[11,"second","","",11,null],[11,"nanosecond","","",11,null],[11,"with_hour","","",11,null],[11,"with_minute","","",11,null],[11,"with_second","","",11,null],[11,"with_nanosecond","","",11,null],[11,"eq","","",11,null],[11,"partial_cmp","","",11,null],[11,"cmp","","",11,null],[11,"hash","","",11,null],[11,"add","","",11,null],[11,"sub","","",11,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"InternalNumeric","chrono::format","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",12,null],[13,"Zero","","Zero (`0`) padding.",12,null],[13,"Space","","Space padding.",12,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"Month","","Month (FW=PW=2).",13,null],[13,"Day","","Day of the month (FW=PW=2).",13,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,null],[13,"Ordinal","","Day of the year (FW=PW=3).",13,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned;\nsee also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).",13,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\nFor formatting, it assumes UTC upon the absence of time zone offset.",13,null],[13,"Internal","","Internal uses only.",13,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",14,null],[13,"LongMonthName","","Full month names.",14,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,null],[13,"LongWeekdayName","","Full day of the week names.",14,null],[13,"LowerAmPm","","AM/PM.",14,null],[13,"UpperAmPm","","AM/PM.",14,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).",14,null],[13,"Nanosecond3","","Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.",14,null],[13,"Nanosecond6","","Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.",14,null],[13,"Nanosecond9","","Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.",14,null],[13,"TimezoneName","","Timezone name.",14,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,null],[13,"TimezoneOffset","","Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\nParsing allows an optional colon.",14,null],[13,"TimezoneOffsetZ","","Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\nParsing allows an optional colon.",14,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,null],[13,"RFC3339","","RFC 3339 &amp; ISO 8601 date and time syntax.",14,null],[13,"Internal","","Internal uses only.",14,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",15,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",15,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",15,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",15,null],[13,"Fixed","","Fixed-format item.",15,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing;\nuse a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",16,null],[12,"year_div_100","","Year divided by 100. Implies that the year is &gt;= 1 BCE when set.",16,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is &gt;= 1 BCE when set.",16,null],[12,"isoyear","","Year in the [ISO week date](../../naive/date/index.html#week-date).",16,null],[12,"isoyear_div_100","","Year in the [ISO week date](../../naive/date/index.html#week-date), divided by 100.\nImplies that the year is &gt;= 1 BCE when set.",16,null],[12,"isoyear_mod_100","","Year in the [ISO week date](../../naive/date/index.html#week-date), modulo 100.\nImplies that the year is &gt;= 1 BCE when set.",16,null],[12,"month","","Month (1--12).",16,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January\n(0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January\n(0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"isoweek","","[ISO week number](../../naive/date/index.html#week-date)\n(1--52 or 1--53 depending on the year).",16,null],[12,"weekday","","Day of the week.",16,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,null],[12,"minute","","Minute number (0--59).",16,null],[12,"second","","Second number (0--60, accounting for leap seconds).",16,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,null],[12,"offset","","Offset from the local time to UTC, in seconds.",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the [`year`](#structfield.year) field from given value.",16,null],[11,"set_year_div_100","","Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.",16,null],[11,"set_year_mod_100","","Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.",16,null],[11,"set_isoyear","","Tries to set the [`isoyear`](#structfield.isoyear) field from given value.",16,null],[11,"set_isoyear_div_100","","Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.",16,null],[11,"set_isoyear_mod_100","","Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.",16,null],[11,"set_month","","Tries to set the [`month`](#structfield.month) field from given value.",16,null],[11,"set_week_from_sun","","Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.",16,null],[11,"set_week_from_mon","","Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.",16,null],[11,"set_isoweek","","Tries to set the [`isoweek`](#structfield.isoweek) field from given value.",16,null],[11,"set_weekday","","Tries to set the [`weekday`](#structfield.weekday) field from given value.",16,null],[11,"set_ordinal","","Tries to set the [`ordinal`](#structfield.ordinal) field from given value.",16,null],[11,"set_day","","Tries to set the [`day`](#structfield.day) field from given value.",16,null],[11,"set_ampm","","Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n(`false` for AM, `true` for PM)",16,null],[11,"set_hour12","","Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\ngiven hour number in 12-hour clocks.",16,null],[11,"set_hour","","Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n[`hour_mod_12`](#structfield.hour_mod_12) fields from given value.",16,null],[11,"set_minute","","Tries to set the [`minute`](#structfield.minute) field from given value.",16,null],[11,"set_second","","Tries to set the [`second`](#structfield.second) field from given value.",16,null],[11,"set_nanosecond","","Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.",16,null],[11,"set_timestamp","","Tries to set the [`timestamp`](#structfield.timestamp) field from given value.",16,null],[11,"set_offset","","Tries to set the [`offset`](#structfield.offset) field from given value.",16,null],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,null],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,null],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the [`offset`](#structfield.offset) field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",16,null],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,null],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,null],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",16,null],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",17,null],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",17,null],[6,"ParseResult","chrono::format","Same to `Result&lt;T, ParseError&gt;`.",null,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"fmt","","",12,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"fmt","","",18,null],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",19,null],[11,"eq","","",19,null],[11,"fmt","","",19,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"fmt","","",20,null],[11,"description","","",20,null],[11,"fmt","","",21,null],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",21,null],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the [calendar date](./naive/date/index.html#calendar-date).",22,null],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",22,null],[10,"month","","Returns the month number starting from 1.",22,null],[10,"month0","","Returns the month number starting from 0.",22,null],[10,"day","","Returns the day of month starting from 1.",22,null],[10,"day0","","Returns the day of month starting from 0.",22,null],[10,"ordinal","","Returns the day of year starting from 1.",22,null],[10,"ordinal0","","Returns the day of year starting from 0.",22,null],[10,"weekday","","Returns the day of week.",22,null],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",22,null],[10,"with_year","","Makes a new value with the year number changed.",22,null],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",22,null],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",22,null],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",22,null],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",22,null],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",22,null],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",22,null],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",22,null],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",23,null],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",23,null],[10,"minute","","Returns the minute number from 0 to 59.",23,null],[10,"second","","Returns the second number from 0 to 59.",23,null],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](./naive/time/index.html#leap-second-handling).",23,null],[10,"with_hour","","Makes a new value with the hour number changed.",23,null],[10,"with_minute","","Makes a new value with the minute number changed.",23,null],[10,"with_second","","Makes a new value with the second number changed.",23,null],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",23,null],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",23,null],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"succ","","The next day in the week.",0,null],[11,"pred","","The previous day in the week.",0,null],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,null],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,null],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,null],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,null],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",24,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",24,null],[11,"num_days","","Returns the total number of whole days in the duration.",24,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",24,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",24,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",24,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",24,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",24,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",24,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",24,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",24,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",24,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",24,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",24,null],[11,"fmt","","",24,null],[11,"cmp","","",24,null],[11,"neg","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"sub","","",24,null],[11,"add","","",24,null],[11,"clone","","",24,null],[11,"div","","",24,null],[11,"mul","","",24,null],[11,"fmt","","",24,null],[11,"partial_cmp","","",24,null],[11,"lt","","",24,null],[11,"le","","",24,null],[11,"gt","","",24,null],[11,"ge","","",24,null],[11,"add","chrono::naive::time","",8,null],[11,"sub","","",8,null],[11,"add","chrono::naive::datetime","",9,null],[11,"sub","","",9,null],[11,"add","chrono::datetime","",11,null],[11,"sub","","",11,null]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"]]};
searchIndex["diesel"] = {"doc":"Diesel is an ORM and query builder designed to reduce the boilerplate for database\ninteractions. [A getting started guide](http://diesel.rs/guides/getting-started/) can be\nfound on our website.","items":[[5,"insert","diesel","Creates an insert statement. Will add the given data to a table. This\nfunction is not exported by default. As with other commands, the resulting\nquery can return the inserted rows if you choose.",null,{"inputs":[{"name":"t"}],"output":{"name":"incompleteinsertstatement"}}],[5,"update","","Creates an update statement. Helpers for updating a single row can be\ngenerated by deriving [`AsChangeset`](query_builder/trait.AsChangeset.html)",null,{"inputs":[{"name":"t"}],"output":{"name":"incompleteupdatestatement"}}],[5,"delete","","Creates a delete statement. Will delete the records in the given set.\nBecause this function has a very generic name, it is not exported by\ndefault.",null,{"inputs":[{"name":"t"}],"output":{"name":"deletestatement"}}],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for\ntesting diesel itself, but likely useful for third party crates as well. The\ngiven expressions must be selectable from anywhere.",null,{"inputs":[{"name":"t"}],"output":{"name":"select"}}],[0,"associations","","Traits related to relationships between multiple tables.",null,null],[8,"BelongsTo","diesel::associations","",null,null],[16,"ForeignKey","","",0,null],[16,"ForeignKeyColumn","","",0,null],[10,"foreign_key","","",0,null],[10,"foreign_key_column","","",0,null],[8,"GroupedBy","","",null,null],[10,"grouped_by","","",1,null],[8,"HasTable","","",null,null],[16,"Table","","",2,null],[10,"table","","",2,null],[8,"Identifiable","","Represents a struct which can be identified on a single table in the\ndatabase. This must be implemented to use associations, and some features of\nupdating. This trait is usually implemented on a reference to a struct, not\nthe struct itself.",null,null],[16,"Id","","",3,null],[10,"id","","",3,null],[0,"backend","diesel","",null,null],[3,"Debug","diesel::backend","",null,null],[8,"Backend","","",null,null],[16,"QueryBuilder","","",4,null],[16,"BindCollector","","",4,null],[16,"RawValue","","",4,null],[16,"ByteOrder","","",4,null],[8,"TypeMetadata","","",null,null],[16,"TypeMetadata","","",5,null],[8,"SupportsReturningClause","","",null,null],[8,"SupportsDefaultKeyword","","",null,null],[8,"UsesAnsiSavepointSyntax","","",null,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[0,"connection","diesel","",null,null],[3,"AnsiTransactionManager","diesel::connection","An implementation of `TransactionManager` which can be used for backends\nwhich use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",null,null],[11,"default","","",7,{"inputs":[],"output":{"name":"ansitransactionmanager"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"begin_transaction","","",7,null],[11,"rollback_transaction","","",7,null],[11,"commit_transaction","","",7,null],[11,"get_transaction_depth","","",7,null],[8,"TransactionManager","","Manages the internal transaction state for a connection. You should not\ninterface with this trait unless you are implementing a new connection\nadapter. You should use [`Connection::transaction`][transaction],\n[`Connection::test_transaction`][test_transaction], or\n[`Connection::begin_test_transaction`][begin_test_transaction] instead.",null,null],[10,"begin_transaction","","Begin a new transaction. If the transaction depth is greater than 0,\nthis should create a savepoint instead. This function is expected to\nincrement the transaction depth by 1.",8,null],[10,"rollback_transaction","","Rollback the inner-most transcation. If the transaction depth is greater\nthan 1, this should rollback to the most recent savepoint. This function\nis expected to decrement the transaction depth by 1.",8,null],[10,"commit_transaction","","Commit the inner-most transcation. If the transaction depth is greater\nthan 1, this should release the most recent savepoint. This function is\nexpected to decrement the transaction depth by 1.",8,null],[10,"get_transaction_depth","","Fetch the current transaction depth. Used to ensure that\n`begin_test_transaction` is not called when already inside of a\ntransaction.",8,null],[8,"SimpleConnection","","Perform simple operations on a backend.",null,null],[10,"batch_execute","","Execute multiple SQL statements within the same string.",9,null],[8,"Connection","","Perform connections to a backend.",null,null],[16,"Backend","","The backend this connection represents.",10,null],[10,"establish","","Establishes a new connection to the database at the given URL. The URL\nshould be a valid connection string for a given backend. See the\ndocumentation for the specific backend for specifics.",10,{"inputs":[{"name":"str"}],"output":{"name":"connectionresult"}}],[11,"transaction","","Executes the given function inside of a database transaction. When\na transaction is already occurring, savepoints will be used to emulate a nested\ntransaction.",10,null],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for\ntests. Panics if called while inside of a transaction.",10,null],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit\nit. Panics if the given function returns an `Err`.",10,null],[0,"expression","diesel","AST types representing various typed SQL expressions. Almost all types\nimplement either [`Expression`](/diesel/expression/trait.Expression.html) or\n[`AsExpression`](/diesel/expression/trait.AsExpression.html).",null,null],[0,"expression_methods","diesel::expression","Adds various methods to construct new expressions. These traits are exported\nby default, and implemented automatically.",null,null],[0,"bool_expression_methods","diesel::expression::expression_methods","",null,null],[8,"BoolExpressionMethods","diesel::expression::expression_methods::bool_expression_methods","",null,null],[11,"and","","Creates a SQL `AND` expression",11,null],[11,"or","","Creates a SQL `OR` expression",11,null],[0,"escape_expression_methods","diesel::expression::expression_methods","",null,null],[8,"EscapeExpressionMethods","diesel::expression::expression_methods::escape_expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify\nthe escape character for the pattern.",null,null],[11,"escape","","",12,null],[0,"global_expression_methods","diesel::expression::expression_methods","",null,null],[8,"ExpressionMethods","diesel::expression::expression_methods::global_expression_methods","",null,null],[11,"eq","","Creates a SQL `=` expression.",13,null],[11,"ne","","Creates a SQL `!=` expression.",13,null],[11,"eq_any","","Creates a SQL `IN` statement. Queries using this method will not be\nplaced in the prepared statement cache. On PostgreSQL, you should use\n`eq(any())` instead. This method may change in the future to\nautomatically perform `= ANY` on PostgreSQL.",13,null],[11,"ne_any","","Creates a SQL `NOT IN` statement. Queries using this method will not be\nplaced in the prepared statement cache. On PostgreSQL, you should use\n`ne(any())` instead. This method may change in the future to\nautomatically perform `!= ANY` on PostgreSQL.",13,null],[11,"is_null","","Creates a SQL `IS NULL` expression.",13,null],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",13,null],[11,"gt","","Creates a SQL `&gt;` expression.",13,null],[11,"ge","","Creates a SQL `&gt;=` expression.",13,null],[11,"lt","","Creates a SQL `&lt;` expression.",13,null],[11,"le","","Creates a SQL `&lt;=` expression.",13,null],[11,"between","","Creates a SQL `BETWEEN` expression using the given range.",13,null],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given range.",13,null],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in\ndescending order.",13,null],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in\nascending order.",13,null],[11,"nullable","","Converts this potentially non-null expression into one which is treated\nas nullable. This method has no impact on the generated SQL, and is only\nused to allow certain comparisons that would otherwise fail to compile.",13,null],[0,"text_expression_methods","diesel::expression::expression_methods","",null,null],[8,"TextExpressionMethods","diesel::expression::expression_methods::text_expression_methods","",null,null],[11,"concat","","Concatenates two strings using the `||` operator.",14,null],[11,"like","","Returns a SQL `LIKE` expression",14,null],[11,"not_like","","Returns a SQL `NOT LIKE` expression",14,null],[0,"helper_types","diesel::expression","The types in this module are all shorthand for `PredicateType&lt;Lhs,\nAsExpr&lt;Rhs, Lhs&gt;&gt;`. Since we often need to return concrete types, instead of\na boxed trait object, these can be useful for writing concise return types.",null,null],[3,"IsNull","diesel::expression::helper_types","",null,null],[3,"IsNotNull","","",null,null],[3,"Asc","","",null,null],[3,"Desc","","",null,null],[6,"SqlTypeOf","","",null,null],[6,"AsExpr","","",null,null],[6,"AsExprOf","","",null,null],[6,"Eq","","",null,null],[6,"NotEq","","",null,null],[6,"Gt","","",null,null],[6,"GtEq","","",null,null],[6,"Lt","","",null,null],[6,"LtEq","","",null,null],[6,"And","","",null,null],[6,"Like","","",null,null],[6,"NotLike","","",null,null],[6,"Between","","",null,null],[6,"NotBetween","","",null,null],[6,"EqAny","","",null,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"new","","",15,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",15,{"inputs":[],"output":{"name":"bool"}}],[11,"to_sql","","",15,null],[11,"collect_binds","","",15,null],[11,"is_safe_to_cache_prepared","","",15,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"new","","",16,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",16,{"inputs":[],"output":{"name":"bool"}}],[11,"to_sql","","",16,null],[11,"collect_binds","","",16,null],[11,"is_safe_to_cache_prepared","","",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"new","","",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",17,{"inputs":[],"output":{"name":"bool"}}],[11,"to_sql","","",17,null],[11,"collect_binds","","",17,null],[11,"is_safe_to_cache_prepared","","",17,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"new","","",18,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",18,{"inputs":[],"output":{"name":"bool"}}],[11,"to_sql","","",18,null],[11,"collect_binds","","",18,null],[11,"is_safe_to_cache_prepared","","",18,null],[0,"sql_literal","diesel::expression","",null,null],[3,"SqlLiteral","diesel::expression::sql_literal","Available for when you truly cannot represent something using the expression\nDSL. You will need to provide the type of the expression, in addition to the\nSQL. The compiler will be unable to verify the correctness of this type.",null,null],[5,"sql","","",null,{"inputs":[{"name":"str"}],"output":{"name":"sqlliteral"}}],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"new","","",19,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"to_sql","","",19,null],[11,"collect_binds","","",19,null],[11,"is_safe_to_cache_prepared","","",19,null],[11,"has_static_query_id","","",19,{"inputs":[],"output":{"name":"bool"}}],[0,"dsl","diesel::expression","Reexports various top level functions and core extensions that are too\ngeneric to export by default. This module exists to conveniently glob import\nin functions where you need them.",null,null],[3,"now","diesel::expression::dsl","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the\n`NOW()` function on backends that support it.",null,null],[3,"Max","","",null,null],[3,"Min","","",null,null],[3,"Sum","","",null,null],[3,"Avg","","",null,null],[5,"count","","Creates a SQL `COUNT` expression",null,{"inputs":[{"name":"t"}],"output":{"name":"count"}}],[5,"count_star","","Creates a SQL `COUNT(*)` expression",null,{"inputs":[],"output":{"name":"countstar"}}],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp\nexpression, and the return value will be an expression of type Date",null,{"inputs":[{"name":"x"}],"output":{"name":"date"}}],[5,"max","","Represents a SQL `MAX` function. This function can only take types which are\nordered.",null,{"inputs":[{"name":"t"}],"output":{"name":"max"}}],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are\nordered.",null,{"inputs":[{"name":"t"}],"output":{"name":"min"}}],[5,"sum","","Represents a SQL `SUM` function. This function can only take types which are\nFoldable.",null,{"inputs":[{"name":"t"}],"output":{"name":"sum"}}],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are\nFoldable.",null,{"inputs":[{"name":"t"}],"output":{"name":"avg"}}],[5,"sql","","",null,{"inputs":[{"name":"str"}],"output":{"name":"sqlliteral"}}],[5,"exists","","Creates a SQL `EXISTS` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"exists"}}],[6,"date","","",null,null],[8,"Expression","diesel::expression","Represents a typed fragment of SQL. Apps should not need to implement this\ntype directly, but it may be common to use this as type boundaries.\nLibraries should consider using\n[`infix_predicate!`](../macro.infix_predicate.html) or\n[`postfix_predicate!`](../macro.postfix_predicate.html) instead of\nimplementing this directly.",null,null],[16,"SqlType","","",20,null],[8,"AsExpression","","Describes how a type can be represented as an expression for a given type.\nThese types couldn&#39;t just implement [`Expression`](trait.Expression.html)\ndirectly, as many things can be used as an expression of multiple types.\n(`String` for example, can be used as either\n[`VarChar`](../types/type.VarChar.html) or\n[`Text`](../types/struct.Text.html)).",null,null],[16,"Expression","","",21,null],[10,"as_expression","","",21,null],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.\nThis is used to ensure that `users.filter(posts::id.eq(1))` fails to\ncompile. This constraint is only used in places where the nullability of a\nSQL type doesn&#39;t matter (everything except `select` and `returning`). For\nplaces where nullability is important, `SelectableExpression` is used\ninstead.",null,null],[8,"SelectableExpression","","Indicates that an expression can be selected from a source. The associated\ntype is usually the same as `Expression::SqlType`, but is used to indicate\nthat a column is always nullable when it appears on the right side of a left\nouter join, even if it wasn&#39;t nullable to begin with.",null,null],[16,"SqlTypeForSelect","","",22,null],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate\nfunctions. Used to ensure that aggregate expressions aren&#39;t mixed with\nnon-aggregate expressions in a select clause, and that they&#39;re never\nincluded in a where clause.",null,null],[8,"BoxableExpression","","Helper trait used when boxing expressions. This exists to work around the\nfact that Rust will not let us use non-core types as bounds on a trait\nobject (you could not return `Box&lt;Expression+NonAggregate&gt;`)",null,null],[11,"has_static_query_id","","",23,{"inputs":[],"output":{"name":"bool"}}],[0,"query_builder","diesel","Contains traits responsible for the actual construction of SQL statements",null,null],[3,"IncompleteUpdateStatement","diesel::query_builder","The type returned by [`update`](/diesel/fn.update.html). The only thing you can do\nwith this type is call `set` on it.",null,null],[3,"UpdateStatement","","",null,null],[3,"IncompleteInsertStatement","","The structure returned by [`insert`](/diesel/fn.insert.html). The only thing that can be done with it\nis call `into`.",null,null],[0,"debug","","",null,null],[0,"bind_collector","","",null,null],[3,"RawBytesBindCollector","diesel::query_builder::bind_collector","",null,null],[12,"metadata","","",24,null],[12,"binds","","",24,null],[8,"BindCollector","","",null,null],[10,"push_bound_value","","",25,null],[11,"fmt","","",24,null],[11,"new","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"push_bound_value","","",24,null],[0,"where_clause","diesel::query_builder","",null,null],[3,"NoWhereClause","diesel::query_builder::where_clause","",null,null],[3,"WhereClause","","",null,null],[8,"WhereAnd","","",null,null],[16,"Output","","",26,null],[10,"and","","",26,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"has_static_query_id","","",27,{"inputs":[],"output":{"name":"bool"}}],[11,"to_sql","","",27,null],[11,"collect_binds","","",27,null],[11,"is_safe_to_cache_prepared","","",27,null],[11,"and","","",27,null],[11,"into","","",27,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"to_sql","","",28,null],[11,"collect_binds","","",28,null],[11,"is_safe_to_cache_prepared","","",28,null],[11,"has_static_query_id","","",28,{"inputs":[],"output":{"name":"bool"}}],[11,"and","","",28,null],[11,"into","","",28,null],[0,"insert_statement","diesel::query_builder","",null,null],[3,"IncompleteInsertStatement","diesel::query_builder::insert_statement","The structure returned by [`insert`](/diesel/fn.insert.html). The only thing that can be done with it\nis call `into`.",null,null],[3,"InsertStatement","","",null,null],[3,"BatchInsertStatement","","The result of calling `insert(records).into(some_table)` when `records` is\na slice or a `Vec`. When calling methods from `ExecuteDsl` or `LoadDsl`.\nWhen the given slice is empty, this struct will not execute any queries.\nWhen the given slice is not empty, this will execute a single bulk insert\non backends which support the `DEFAULT` keyword, and one query per record\non backends which do not (SQLite).",null,null],[3,"Insert","","",null,null],[8,"IntoInsertStatement","","",null,null],[16,"InsertStatement","","",29,null],[10,"into_insert_statement","","",29,null],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added\nto a record for insert. Used to prevent things like\n`insert(&amp;vec![user.on_conflict_do_nothing(), user2.on_conflict_do_nothing()])`\nfrom compiling.",null,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"into","","Specify which table the data passed to `insert` should be added to.",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"no_returning_clause","","",31,{"inputs":[{"name":"t"},{"name":"u"},{"name":"op"}],"output":{"name":"self"}}],[11,"new","","",31,{"inputs":[{"name":"t"},{"name":"u"},{"name":"op"},{"name":"ret"}],"output":{"name":"self"}}],[11,"to_sql","","",31,null],[11,"collect_binds","","",31,null],[11,"is_safe_to_cache_prepared","","",31,null],[11,"has_static_query_id","","",31,{"inputs":[],"output":{"name":"bool"}}],[11,"as_query","","",31,null],[11,"returning","","Specify what expression is returned after execution of the `insert`.\nThis method can only be called once.",31,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"returning","","Specify what expression is returned after execution of the `insert`.\n# Examples",32,null],[11,"execute","","",32,null],[11,"execute","","",32,null],[11,"load","","",32,null],[11,"get_result","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"to_sql","","",33,null],[11,"collect_binds","","",33,null],[11,"is_safe_to_cache_prepared","","",33,null],[11,"has_static_query_id","","",33,{"inputs":[],"output":{"name":"bool"}}],[0,"update_statement","diesel::query_builder","",null,null],[3,"IncompleteUpdateStatement","diesel::query_builder::update_statement","The type returned by [`update`](/diesel/fn.update.html). The only thing you can do\nwith this type is call `set` on it.",null,null],[3,"UpdateStatement","","",null,null],[0,"changeset","","",null,null],[8,"AsChangeset","diesel::query_builder::update_statement::changeset","Types which can be passed to\n[`update.set`](/diesel/query_builder/struct.IncompleteUpdateStatement.html#method.set).",null,null],[16,"Target","","",34,null],[16,"Changeset","","",34,null],[10,"as_changeset","","",34,null],[8,"Changeset","","Apps should not need to concern themselves with this trait.",null,null],[10,"is_noop","","",35,null],[10,"to_sql","","",35,null],[10,"collect_binds","","",35,null],[0,"target","diesel::query_builder::update_statement","",null,null],[8,"IntoUpdateTarget","diesel::query_builder::update_statement::target","",null,null],[16,"WhereClause","","",36,null],[10,"into_update_target","","",36,null],[11,"fmt","diesel::query_builder::update_statement","",37,null],[11,"set","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"to_sql","","",38,null],[11,"collect_binds","","",38,null],[11,"is_safe_to_cache_prepared","","",38,null],[11,"has_static_query_id","","",38,{"inputs":[],"output":{"name":"bool"}}],[11,"as_query","","",38,null],[11,"returning","","Specify what expression is returned after execution of the `update`.\n# Examples",38,null],[6,"BuildQueryResult","diesel::query_builder","",null,null],[8,"QueryId","","",null,null],[16,"QueryId","","",39,null],[10,"has_static_query_id","","",39,{"inputs":[],"output":{"name":"bool"}}],[11,"query_id","","",39,{"inputs":[],"output":{"name":"option"}}],[8,"AsChangeset","","Types which can be passed to\n[`update.set`](/diesel/query_builder/struct.IncompleteUpdateStatement.html#method.set).",null,null],[16,"Target","","",34,null],[16,"Changeset","","",34,null],[10,"as_changeset","","",34,null],[8,"Changeset","","Apps should not need to concern themselves with this trait.",null,null],[10,"is_noop","","",35,null],[10,"to_sql","","",35,null],[10,"collect_binds","","",35,null],[8,"IntoUpdateTarget","","",null,null],[16,"WhereClause","","",36,null],[10,"into_update_target","","",36,null],[8,"QueryBuilder","","Apps should not need to concern themselves with this trait.",null,null],[10,"push_sql","","",40,null],[10,"push_identifier","","",40,null],[10,"push_bind_param","","",40,null],[10,"finish","","",40,null],[8,"Query","","A complete SQL query with a return type. This can be a select statement, or\na command such as `update` or `insert` with a `RETURNING` clause. Unlike\n[`Expression`](../expression/trait.Expression.html), types implementing this\ntrait are guaranteed to be executable on their own.",null,null],[16,"SqlType","","",41,null],[8,"QueryFragment","","An untyped fragment of SQL. This may be a complete SQL command (such as\nan update statement without a `RETURNING` clause), or a subsection (such as\nour internal types used to represent a `WHERE` clause). All methods on\n[`Connection`](../connection/trait.Connection.html) that execute a query require this\ntrait to be implemented.",null,null],[10,"to_sql","","",42,null],[10,"collect_binds","","",42,null],[10,"is_safe_to_cache_prepared","","",42,null],[8,"AsQuery","","Types that can be converted into a complete, typed SQL query. This is used\ninternally to automatically add the right select clause when none is\nspecified, or to automatically add `RETURNING *` in certain contexts",null,null],[16,"SqlType","","",43,null],[16,"Query","","",43,null],[10,"as_query","","",43,null],[0,"types","diesel","Types which represent a native SQL data type, and the conversions between\nthem and Rust primitives. The structs in this module are *only* used as\nmarkers to represent a SQL type, and shouldn&#39;t be used in your structs. See\nthe documentation for each type to see the Rust types that can be used with\na corresponding SQL type. Additional types can be added by other crates.",null,null],[3,"Bool","diesel::types","The boolean SQL type. On SQLite this is emulated with an integer.",null,null],[3,"SmallInt","","The small integer SQL type.",null,null],[3,"Integer","","The integer SQL type.",null,null],[3,"BigInt","","The big integer SQL type.",null,null],[3,"Float","","The float SQL type.",null,null],[3,"Double","","The double precision float SQL type.",null,null],[3,"Numeric","","The numeric SQL type.",null,null],[3,"Text","","The text SQL type.",null,null],[3,"Binary","","The binary SQL type.",null,null],[3,"Date","","The date SQL type.",null,null],[3,"Interval","","The interval SQL type.",null,null],[3,"Time","","The time SQL type.",null,null],[3,"Timestamp","","The timestamp/datetime SQL type.",null,null],[3,"Nullable","","The nullable SQL type. This wraps another SQL type to indicate that it can\nbe null. By default all values are assumed to be `NOT NULL`.",null,null],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",null,null],[13,"Yes","","",44,null],[13,"No","","",44,null],[0,"ops","","Apps should not need to concern themselves with this module.",null,null],[8,"Add","diesel::types::ops","",null,null],[16,"Rhs","","",45,null],[16,"Output","","",45,null],[8,"Sub","","",null,null],[16,"Rhs","","",46,null],[16,"Output","","",46,null],[8,"Mul","","",null,null],[16,"Rhs","","",47,null],[16,"Output","","",47,null],[8,"Div","","",null,null],[16,"Rhs","","",48,null],[16,"Output","","",48,null],[11,"has_static_query_id","diesel::types","",49,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",50,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",51,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",52,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",53,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",54,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",55,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",56,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",57,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",58,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",59,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",60,{"inputs":[],"output":{"name":"bool"}}],[6,"VarChar","","",null,null],[8,"SqlOrd","","",null,null],[8,"Foldable","","",null,null],[16,"Sum","","",61,null],[16,"Avg","","",61,null],[8,"HasSqlType","","",null,null],[10,"metadata","","",62,null],[11,"row_metadata","","",62,{"inputs":[{"name":"vec"}],"output":null}],[8,"NotNull","","",null,null],[8,"IntoNullable","","",null,null],[16,"Nullable","","",63,null],[8,"FromSql","","How to deserialize a single field of a given type. The input will always be\nthe binary representation, not the text.",null,null],[10,"from_sql","","",64,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[8,"FromSqlRow","","How to deserialize multiple fields, with a known type. This type is\nimplemented for tuples of various sizes.",null,null],[10,"build_from_row","","",65,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"ToSql","","Serializes a single value to be sent to the database. The output will be\nincluded as a bind parameter, and is expected to be the binary format, not\ntext.",null,null],[10,"to_sql","","",66,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"default","","",50,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"smallint"}}],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"integer"}}],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"default","","",53,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"default","","",54,{"inputs":[],"output":{"name":"float"}}],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"default","","",55,{"inputs":[],"output":{"name":"double"}}],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"default","","",67,{"inputs":[],"output":{"name":"numeric"}}],[11,"fmt","","",56,null],[11,"clone","","",56,null],[11,"default","","",56,{"inputs":[],"output":{"name":"text"}}],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"binary"}}],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"date"}}],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"default","","",68,{"inputs":[],"output":{"name":"interval"}}],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"default","","",59,{"inputs":[],"output":{"name":"time"}}],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"default","","",60,{"inputs":[],"output":{"name":"timestamp"}}],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"default","","",49,{"inputs":[],"output":{"name":"nullable"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"eq","","",44,null],[0,"mysql","diesel","",null,null],[3,"Mysql","diesel::mysql","",null,null],[3,"MysqlConnection","","A connection to a MySQL database. Connection URLs should be in the form\n`mysql://[user[:password]@]host/database_name`",null,null],[4,"MysqlType","","Represents the possible forms a bind parameter can be transmitted as.\nEach variant represents one of the forms documented at\nhttps://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html",null,null],[13,"Tiny","","",69,null],[13,"Short","","",69,null],[13,"Long","","",69,null],[13,"LongLong","","",69,null],[13,"Float","","",69,null],[13,"Double","","",69,null],[13,"Time","","",69,null],[13,"Date","","",69,null],[13,"DateTime","","",69,null],[13,"Timestamp","","",69,null],[13,"String","","",69,null],[13,"Blob","","",69,null],[11,"fmt","","",70,null],[11,"clone","","",70,null],[11,"hash","","",70,null],[11,"eq","","",70,null],[11,"hash","","",69,null],[11,"eq","","",69,null],[11,"clone","","",69,null],[11,"batch_execute","","",71,null],[11,"establish","","",71,{"inputs":[{"name":"str"}],"output":{"name":"connectionresult"}}],[11,"metadata","","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[0,"query_builder","","",null,null],[3,"MysqlQueryBuilder","diesel::mysql::query_builder","",null,null],[11,"default","","",72,{"inputs":[],"output":{"name":"mysqlquerybuilder"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"push_sql","","",72,null],[11,"push_identifier","","",72,null],[11,"push_bind_param","","",72,null],[11,"finish","","",72,null],[0,"pg","diesel","",null,null],[3,"Pg","diesel::pg","",null,null],[3,"PgTypeMetadata","","",null,null],[12,"oid","","",73,null],[12,"array_oid","","",73,null],[3,"PgConnection","","The connection string expected by `PgConnection::establish`\nshould be a PostgreSQL connection string, as documented at\nhttp://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING",null,null],[3,"PgQueryBuilder","","",null,null],[0,"expression","","",null,null],[0,"expression_methods","diesel::pg::expression","",null,null],[8,"PgExpressionMethods","diesel::pg::expression::expression_methods","",null,null],[11,"is_not_distinct_from","","Creates a PostgreSQL `IS NOT DISTINCT FROM` expression. This behaves\nidentically to the `=` operator, except that `NULL` is treated as a\nnormal value.",74,null],[8,"ArrayExpressionMethods","","",null,null],[11,"overlaps_with","","Compares two arrays for common elements, using the `&amp;&amp;` operator in\nthe final SQL",75,null],[11,"contains","","Compares whether an array contains another array, using the `@&gt;` operator.",75,null],[11,"is_contained_by","","Compares whether an array is contained by another array, using the `&lt;@` operator.\nThis is the opposite of `contains`",75,null],[8,"SortExpressionMethods","","",null,null],[11,"nulls_first","","Specify that nulls should come before other values in this ordering.\nNormally, nulls come last when sorting in ascending order and first\nwhen sorting in descending order.",76,null],[11,"nulls_last","","Specify that nulls should come after other values in this ordering.\nNormally, nulls come last when sorting in ascending order and first\nwhen sorting in descending order.",76,null],[0,"extensions","diesel::pg::expression","This module contains extensions that are added to core types to aid in\nbuilding expressions. These traits are not exported by default. The are also\nre-exported in `diesel::expression::dsl`",null,null],[8,"MicroIntervalDsl","diesel::pg::expression::extensions","A DSL added to `i64` and `f64` to construct PostgreSQL intervals of less\nthan 1 day.",null,null],[10,"microseconds","","Returns a PgInterval representing `self` as microseconds",77,null],[11,"milliseconds","","Returns a PgInterval representing `self` as milliseconds",77,null],[11,"seconds","","Returns a PgInterval representing `self` as seconds",77,null],[11,"minutes","","Returns a PgInterval representing `self` as minutes",77,null],[11,"hours","","Returns a PgInterval representing `self` as hours",77,null],[11,"microsecond","","Identical to `microseconds`",77,null],[11,"millisecond","","Identical to `milliseconds`",77,null],[11,"second","","Identical to `seconds`",77,null],[11,"minute","","Identical to `minutes`",77,null],[11,"hour","","Identical to `hours`",77,null],[8,"DayAndMonthIntervalDsl","","A DSL added to `i32` and `f64` to construct PostgreSQL intervals of greater\nthan 1 day.",null,null],[10,"days","","Returns a PgInterval representing `self` in days",78,null],[10,"months","","Returns a PgInterval representing `self` in monhts",78,null],[11,"weeks","","Returns a PgInterval representing `self` in weeks",78,null],[11,"years","","Returns a PgInterval representing `self` in weeks",78,null],[11,"day","","Identical to `days`",78,null],[11,"week","","Identical to `weeks`",78,null],[11,"month","","Identical to `months`",78,null],[11,"year","","Identical to `years`",78,null],[0,"dsl","diesel::pg::expression","PostgreSQL specific expression DSL methods. This module will be glob\nimported by [`expression::dsl`](../../expression/dsl/index.html) when\ncompiled with the `feature = &quot;postgres&quot;` flag.",null,null],[5,"any","diesel::pg::expression::dsl","Creates a PostgreSQL `ANY` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"any"}}],[5,"all","","Creates a PostgreSQL `ALL` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"all"}}],[11,"fmt","diesel::pg","",79,null],[11,"clone","","",79,null],[11,"hash","","",79,null],[11,"eq","","",79,null],[11,"fmt","","",73,null],[11,"clone","","",73,null],[11,"hash","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"default","","",80,{"inputs":[],"output":{"name":"pgquerybuilder"}}],[11,"new","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"push_sql","","",80,null],[11,"push_identifier","","",80,null],[11,"push_bind_param","","",80,null],[11,"finish","","",80,null],[11,"batch_execute","","",81,null],[11,"establish","","",81,{"inputs":[{"name":"str"}],"output":{"name":"connectionresult"}}],[0,"types","","",null,null],[11,"metadata","","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[0,"date_and_time","diesel::pg::types","",null,null],[3,"PgTimestamp","diesel::pg::types::date_and_time","Timestamps are represented in Postgres as a 64 bit signed integer representing the number of\nmicroseconds since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate\nthe integer&#39;s meaning.",null,null],[12,"0","","",82,null],[3,"PgDate","","Dates are represented in Postgres as a 32 bit signed integer representing the number of julian\ndays since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the\ninteger&#39;s meaning.",null,null],[12,"0","","",83,null],[3,"PgTime","","Time is represented in Postgres as a 64 bit signed integer representing the number of\nmicroseconds since midnight. This struct is a dumb wrapper type, meant only to indicate the\ninteger&#39;s meaning.",null,null],[12,"0","","",84,null],[3,"PgInterval","","Intervals in Postgres are separated into 3 parts. A 64 bit integer representing time in\nmicroseconds, a 32 bit integer representing number of minutes, and a 32 bit integer\nrepresenting number of months. This struct is a dumb wrapper type, meant only to indicate the\nmeaning of these parts.",null,null],[12,"microseconds","","",85,null],[12,"days","","",85,null],[12,"months","","",85,null],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"fmt","diesel::pg::types::date_and_time","",82,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"cmp","","",82,null],[11,"fmt","","",83,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"cmp","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"cmp","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"new","","",85,{"inputs":[{"name":"i64"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from_microseconds","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_days","","",85,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from_months","","",85,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"build_from_row","","",83,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",83,null],[11,"build_from_row","","",84,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",84,null],[11,"build_from_row","","",82,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",82,null],[11,"build_from_row","","",82,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",82,null],[11,"as_expression","","",83,null],[11,"as_expression","","",83,null],[11,"to_sql","","",83,null],[11,"as_expression","","",84,null],[11,"as_expression","","",84,null],[11,"to_sql","","",84,null],[11,"as_expression","","",82,null],[11,"as_expression","","",82,null],[11,"to_sql","","",82,null],[11,"as_expression","","",82,null],[11,"as_expression","","",82,null],[11,"to_sql","","",82,null],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",68,{"inputs":[],"output":{"name":"bool"}}],[11,"build_from_row","diesel::pg::types::date_and_time","",85,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",85,null],[11,"as_expression","","",85,null],[11,"as_expression","","",85,null],[11,"to_sql","","",85,null],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"to_sql","diesel::pg::types::date_and_time","",82,null],[11,"to_sql","","",82,null],[11,"from_sql","","",82,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",82,null],[11,"to_sql","","",82,null],[11,"from_sql","","",82,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",83,null],[11,"to_sql","","",83,null],[11,"from_sql","","",83,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",84,null],[11,"to_sql","","",84,null],[11,"from_sql","","",84,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",85,null],[11,"to_sql","","",85,null],[11,"from_sql","","",85,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"add","","",85,null],[0,"floats","diesel::pg::types","",null,null],[4,"PgNumeric","diesel::pg::types::floats","",null,null],[13,"Positive","","",86,null],[12,"weight","diesel::pg::types::floats::PgNumeric","",86,null],[12,"scale","","",86,null],[12,"digits","","",86,null],[13,"Negative","diesel::pg::types::floats","",86,null],[12,"weight","diesel::pg::types::floats::PgNumeric","",86,null],[12,"scale","","",86,null],[12,"digits","","",86,null],[13,"NaN","diesel::pg::types::floats","",86,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"from_sql","","",86,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",86,null],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"has_static_query_id","diesel::types","",67,{"inputs":[],"output":{"name":"bool"}}],[11,"build_from_row","diesel::pg::types::floats","",86,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",86,null],[11,"as_expression","","",86,null],[11,"as_expression","","",86,null],[11,"to_sql","","",86,null],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::backend","",6,{"inputs":[],"output":null}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[0,"sql_types","diesel::pg::types","PostgreSQL specific SQL types",null,null],[3,"Oid","diesel::pg::types::sql_types","The `OID` SQL type. This is a PostgreSQL specific type.",null,null],[3,"Timestamptz","","The &quot;timestamp with time zone&quot; SQL type, which PostgreSQL abbreviates\nto `timestamptz`.",null,null],[3,"Array","","The `Array` SQL type. This wraps another type to represent a SQL array of\nthat type. Multidimensional arrays are not supported, nor are arrays\ncontaining null.",null,null],[3,"Uuid","","The `UUID` SQL type. This type can only be used with `feature = &quot;uuid&quot;`",null,null],[3,"Json","","The JSON SQL type.  This type can only be used with `feature =\n&quot;serde_json&quot;`",null,null],[3,"Jsonb","","The `jsonb` SQL type.  This type can only be used with `feature =\n&quot;serde_json&quot;`",null,null],[6,"SmallSerial","","Alias for `SmallInt`",null,null],[6,"Serial","","Alias for `Integer`",null,null],[6,"BigSerial","","Alias for `BigInt`",null,null],[6,"Bytea","","Alias for `Binary`, to ensure `infer_schema!` works",null,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"default","","",87,{"inputs":[],"output":{"name":"oid"}}],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"timestamptz"}}],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"array"}}],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"default","","",90,{"inputs":[],"output":{"name":"uuid"}}],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"default","","",91,{"inputs":[],"output":{"name":"json"}}],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"default","","",92,{"inputs":[],"output":{"name":"jsonb"}}],[0,"upsert","diesel::pg","",null,null],[5,"do_nothing","diesel::pg::upsert","Used in conjuction with\n[`on_conflict`](trait.OnConflictExtension.html#method.on_conflict) to write\na query in the form `ON CONFLICT (name) DO NOTHING`. If you want to do\nnothing when *any* constraint conflicts, use\n[`on_conflict_do_nothing()`](trait.OnConflictExtension.html#method.on_conflict_do_nothing)\ninstead.",null,{"inputs":[],"output":{"name":"donothing"}}],[5,"on_constraint","","Used to specify the constraint name for an upsert statement in the form `ON\nCONFLICT ON CONSTRAINT`. Note that `constraint_name` must be the name of a\nunique constraint, not the name of an index.",null,{"inputs":[{"name":"str"}],"output":{"name":"onconstraint"}}],[8,"OnConflictExtension","","Adds extension methods related to PG upsert",null,null],[11,"on_conflict_do_nothing","","Adds `ON CONFLICT DO NOTHING` to the insert statement, without\nspecifying any columns or constraints to restrict the conflict to.",93,null],[11,"on_conflict","","Adds an `ON CONFLICT` to the insert statement, performing the action\nspecified by `Action` if a conflict occurs for `Target`.",93,null],[0,"data_types","diesel::pg","",null,null],[3,"PgTimestamp","diesel::pg::data_types","Timestamps are represented in Postgres as a 64 bit signed integer representing the number of\nmicroseconds since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate\nthe integer&#39;s meaning.",null,null],[12,"0","","",82,null],[3,"PgDate","","Dates are represented in Postgres as a 32 bit signed integer representing the number of julian\ndays since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the\ninteger&#39;s meaning.",null,null],[12,"0","","",83,null],[3,"PgTime","","Time is represented in Postgres as a 64 bit signed integer representing the number of\nmicroseconds since midnight. This struct is a dumb wrapper type, meant only to indicate the\ninteger&#39;s meaning.",null,null],[12,"0","","",84,null],[3,"PgInterval","","Intervals in Postgres are separated into 3 parts. A 64 bit integer representing time in\nmicroseconds, a 32 bit integer representing number of minutes, and a 32 bit integer\nrepresenting number of months. This struct is a dumb wrapper type, meant only to indicate the\nmeaning of these parts.",null,null],[12,"microseconds","","",85,null],[12,"days","","",85,null],[12,"months","","",85,null],[4,"PgNumeric","","",null,null],[13,"Positive","","",86,null],[12,"weight","diesel::pg::data_types::PgNumeric","",86,null],[12,"scale","","",86,null],[12,"digits","","",86,null],[13,"Negative","diesel::pg::data_types","",86,null],[12,"weight","diesel::pg::data_types::PgNumeric","",86,null],[12,"scale","","",86,null],[12,"digits","","",86,null],[13,"NaN","diesel::pg::data_types","",86,null],[0,"sqlite","diesel","",null,null],[3,"Sqlite","diesel::sqlite","",null,null],[3,"SqliteConnection","","",null,null],[4,"SqliteType","","",null,null],[13,"Binary","","",94,null],[13,"Text","","",94,null],[13,"Float","","",94,null],[13,"Double","","",94,null],[13,"SmallInt","","",94,null],[13,"Integer","","",94,null],[13,"Long","","",94,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"hash","","",95,null],[11,"eq","","",95,null],[11,"hash","","",94,null],[11,"eq","","",94,null],[11,"clone","","",94,null],[11,"batch_execute","","",96,null],[11,"establish","","",96,{"inputs":[{"name":"str"}],"output":{"name":"connectionresult"}}],[11,"metadata","","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[0,"query_builder","","",null,null],[3,"SqliteQueryBuilder","diesel::sqlite::query_builder","",null,null],[0,"functions","","",null,null],[5,"insert_or_replace","diesel::sqlite::query_builder::functions","Creates a SQLite `INSERT OR REPLACE` statement. If a constraint violation\nfails, SQLite will attempt to replace the offending row instead.",null,{"inputs":[{"name":"t"}],"output":{"name":"incompleteinsertstatement"}}],[11,"default","diesel::sqlite::query_builder","",97,{"inputs":[],"output":{"name":"sqlitequerybuilder"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"push_sql","","",97,null],[11,"push_identifier","","",97,null],[11,"push_bind_param","","",97,null],[11,"finish","","",97,null],[0,"migrations","diesel","Provides functions for maintaining database schema.",null,null],[4,"MigrationError","diesel::migrations","",null,null],[13,"MigrationDirectoryNotFound","","",98,null],[13,"UnknownMigrationFormat","","",98,null],[13,"IoError","","",98,null],[13,"UnknownMigrationVersion","","",98,null],[13,"NoMigrationRun","","",98,null],[4,"RunMigrationsError","","",null,null],[13,"MigrationError","","",99,null],[13,"QueryError","","",99,null],[13,"EmptyMigration","","",99,null],[5,"migration_from","","",null,{"inputs":[{"name":"pathbuf"}],"output":{"name":"result"}}],[5,"run_pending_migrations","","Runs all migrations that have not yet been run. This function will print all progress to\nstdout. This function will return an `Err` if some error occurs reading the migrations, or if\nany migration fails to run. Each migration is run in its own transaction, so some migrations\nmay be committed, even if a later migration fails to run.",null,{"inputs":[{"name":"conn"}],"output":{"name":"result"}}],[5,"revert_latest_migration","","Reverts the last migration that was run. Returns the version that was reverted. Returns an\n`Err` if no migrations have ever been run.",null,{"inputs":[{"name":"conn"}],"output":{"name":"result"}}],[5,"run_migrations","","Run all pending migrations in the given list. Apps should likely be calling\n`run_pending_migrations` or `run_pending_migrations_in_directory` instead.",null,{"inputs":[{"name":"conn"},{"name":"list"},{"name":"write"}],"output":{"name":"result"}}],[5,"find_migrations_directory","","Returns the directory containing migrations. Will look at for\n$PWD/migrations. If it is not found, it will search the parents of the\ncurrent directory, until it reaches the root directory.  Returns\n`MigrationError::MigrationDirectoryNotFound` if no directory is found.",null,{"inputs":[],"output":{"name":"result"}}],[5,"search_for_migrations_directory","","Searches for the migrations directory relative to the given path. See\n`find_migrations_directory` for more details.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"fmt","","",98,null],[11,"description","","",98,null],[11,"fmt","","",98,null],[11,"eq","","",98,null],[11,"from","","",98,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"description","","",99,null],[11,"fmt","","",99,null],[11,"from","","",99,{"inputs":[{"name":"migrationerror"}],"output":{"name":"self"}}],[11,"from","","",99,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",99,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[8,"MigrationConnection","","A connection which can be passed to the migration methods. This exists only\nto wrap up some constraints which are meant to hold for *all* connections.\nThis trait will go away at some point in the future. Any Diesel connection\nshould be useable where this trait is required.",null,null],[10,"previously_run_migration_versions","","",100,null],[10,"latest_run_migration_version","","",100,null],[10,"insert_new_migration","","",100,null],[8,"Migration","","",null,null],[10,"version","","",101,null],[10,"run","","",101,null],[10,"revert","","",101,null],[0,"query_source","diesel","Types in this module are mostly internal and automatically generated. You\nshouldn&#39;t need to interact with these types during normal usage, other than\nthe methods on [`Table`](/diesel/query_source/trait.Table.html)",null,null],[8,"JoinTo","diesel::query_source","Indicates that two tables can be used together in a JOIN clause.\nImplementations of this trait will be generated for you automatically by\nthe [association annotations](FIXME: Add link) from codegen.",null,null],[8,"Queryable","","Trait indicating that a record can be queried from the database. This trait\ncan be derived automatically using `diesel_codegen`. This trait can only be derived for\nstructs, not enums.",null,null],[16,"Row","","",102,null],[10,"build","","",102,null],[8,"Column","","A column on a database table. Types which implement this trait should have\nbeen generated by the [`table!` macro](../macro.table.html).",null,null],[16,"Table","","",103,null],[10,"name","","",103,{"inputs":[],"output":{"name":"str"}}],[8,"Table","","A SQL database table. Types which implement this trait should have been\ngenerated by the [`table!` macro](../macro.table.html).",null,null],[16,"PrimaryKey","","",104,null],[16,"AllColumns","","",104,null],[10,"primary_key","","",104,null],[10,"all_columns","","",104,null],[11,"inner_join","","",104,null],[11,"left_outer_join","","",104,null],[0,"result","diesel","",null,null],[4,"Error","diesel::result","The generic &quot;things can fail in a myriad of ways&quot; enum. This type is not\nindended to be exhaustively matched, and new variants may be added in the\nfuture without a major version bump.",null,null],[13,"InvalidCString","","",105,null],[13,"DatabaseError","","",105,null],[13,"NotFound","","",105,null],[13,"QueryBuilderError","","",105,null],[13,"DeserializationError","","",105,null],[13,"SerializationError","","",105,null],[13,"RollbackTransaction","","You can return this variant inside of a transaction when you want to\nroll it back, but have no actual error to return. Diesel will never\nreturn this variant unless you gave it to us, and it can be safely\nignored in error handling.",105,null],[4,"DatabaseErrorKind","","The kind of database error that occurred. This is not meant to exhaustively\ncover all possible errors, but is used to identify errors which are commonly\nrecovered from programatically. This enum is not intended to be exhaustively\nmatched, and new variants may be added in the future without a major version\nbump.",null,null],[13,"UniqueViolation","","",106,null],[13,"ForeignKeyViolation","","",106,null],[13,"UnableToSendCommand","","",106,null],[4,"ConnectionError","","",null,null],[13,"InvalidCString","","",107,null],[13,"BadConnection","","",107,null],[13,"InvalidConnectionUrl","","",107,null],[13,"CouldntSetupConfiguration","","Diesel may try to automatically set session specific configuration\nvalues, such as UTF8 encoding, or enabling the `||` operator on MySQL.\nThis variant is returned if an error occurred executing the query to set\nthose options. Diesel will never affect global configuration.",107,null],[6,"QueryResult","","",null,null],[6,"ConnectionResult","","",null,null],[8,"DatabaseErrorInformation","","",null,null],[10,"message","","",108,null],[10,"details","","",108,null],[10,"hint","","",108,null],[10,"table_name","","",108,null],[10,"column_name","","",108,null],[10,"constraint_name","","",108,null],[8,"OptionalExtension","","",null,null],[10,"optional","","",109,null],[11,"fmt","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","","",108,null],[11,"fmt","","",107,null],[11,"optional","","",110,null],[11,"from","","",107,{"inputs":[{"name":"nulerror"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"nulerror"}],"output":{"name":"self"}}],[11,"fmt","","",105,null],[11,"description","","",105,null],[11,"fmt","","",107,null],[11,"description","","",107,null],[11,"eq","","",105,null],[0,"row","diesel","",null,null],[8,"Row","diesel::row","The row trait which is used for [`FromSqlRow`][]. Apps should not need to\nconcern themselves with this trait.",null,null],[10,"take","","",111,null],[10,"next_is_null","","",111,null],[0,"helper_types","diesel","Provide helper types for concisely writing the return type of functions.\nAs with iterators, it is unfortunately difficult to return a partially\nconstructed query without exposing the exact implementation of the\nfunction. Without higher kinded types, these various DSLs can&#39;t be\ncombined into a single trait for boxing purposes.",null,null],[6,"Select","diesel::helper_types","Represents the return type of `.select(selection)`",null,null],[6,"Filter","","Represents the return type of `.filter(predicate)`",null,null],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",null,null],[6,"Find","","Represents the return type of `.find(pk)`",null,null],[6,"Order","","Represents the return type of `.order(ordering)`",null,null],[6,"Limit","","Represents the return type of `.limit()`",null,null],[6,"Offset","","Represents the return type of `.offset()`",null,null],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",null,null],[0,"prelude","diesel","Re-exports important traits and types. Meant to be glob imported when using Diesel.",null,null],[8,"GroupedBy","diesel::prelude","",null,null],[10,"grouped_by","","",1,null],[8,"Insertable","","Represents that a structure can be used to to insert a new row into the\ndatabase. This is automatically implemented for `&amp;[T]` and `&amp;Vec&lt;T&gt;` for\ninserting more than one record.",null,null],[16,"Values","","",112,null],[10,"values","","",112,null],[8,"BelongingToDsl","","",null,null],[16,"Output","","",113,null],[10,"belonging_to","","",113,null],[8,"BoxedDsl","","Boxes the pieces of a query into a single type. This is useful for cases\nwhere you want to conditionally modify a query, but need the type to remain\nthe same. The backend must be specified as part of this. It is not possible\nto box a query and have it be useable on multiple backends.",null,null],[11,"into_boxed","","",114,null],[8,"CountDsl","","Adds a simple `count` function to queries. Automatically implemented for all\ntypes which implement `SelectDsl`.",null,null],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",115,null],[8,"DistinctDsl","","Adds the `DISTINCT` keyword to a query.",null,null],[16,"Output","","",116,null],[10,"distinct","","",116,null],[8,"FilterDsl","","Adds to the `WHERE` clause of a query. If there is already a `WHERE` clause,\nthe result will be `old AND new`. This is automatically implemented for the\nvarious query builder types.",null,null],[16,"Output","","",117,null],[10,"filter","","",117,null],[8,"FindDsl","","Attempts to find a single record from the given table by primary key.",null,null],[16,"Output","","",118,null],[10,"find","","",118,null],[8,"LimitDsl","","Sets the limit clause of a query. If there was already a limit clause, it\nwill be overridden. This is automatically implemented for the various query\nbuilder types.",null,null],[16,"Output","","",119,null],[10,"limit","","",119,null],[8,"LoadDsl","","Methods to execute a query given a connection. These are automatically implemented for the\nvarious query types.",null,null],[16,"SqlType","","",120,null],[10,"load","","Executes the given query, returning an `Iterator` over the returned\nrows.",120,null],[11,"first","","Attempts to load a single record. Returns `Ok(record)` if found, and\n`Err(NotFound)` if no results are returned. If the query truly is\noptional, you can call `.optional()` on the result of this to get a\n`Result&lt;Option&lt;U&gt;&gt;`.",120,null],[10,"get_result","","Runs the command, and returns the affected row. `Err(NotFound)` will be\nreturned if the query affected 0 rows. You can call `.optional()` on the\nresult of this if the command was optional to get back a\n`Result&lt;Option&lt;U&gt;&gt;`",120,null],[11,"get_results","","Runs the command, returning an `Iterator` over the affected rows.",120,null],[8,"ExecuteDsl","","",null,null],[10,"execute","","Executes the given command, returning the number of rows affected. Used\nin conjunction with\n[`update`](/diesel/fn.update.html) and\n[`delete`](/diesel/fn.delete.html)",121,null],[8,"OffsetDsl","","Sets the offset clause of a query. If there was already a offset clause, it\nwill be overridden. This is automatically implemented for the various query\nbuilder types.",null,null],[16,"Output","","",122,null],[10,"offset","","",122,null],[8,"OrderDsl","","Sets the order clause of a query. If there was already a order clause, it\nwill be overridden. The expression passed to `order` must actually be valid\nfor the query. See also:\n[`.desc()`](../expression/expression_methods/global_expression_methods/trait.ExpressionMethods.html#method.desc)\nand [`.asc()`](../expression/expression_methods/global_expression_methods/trait.ExpressionMethods.html#method.asc)",null,null],[16,"Output","","",123,null],[10,"order","","",123,null],[8,"SaveChangesDsl","","",null,null],[10,"save_changes","","",124,null],[8,"SelectDsl","","Sets the select clause of a query. If there was already a select clause, it\nwill be overridden. The expression passed to `select` must actually be valid\nfor the query (only contains columns from the target table, doesn&#39;t mix\naggregate + non-aggregate expressions, etc).",null,null],[16,"Output","","",125,null],[10,"select","","",125,null],[8,"JoinTo","","Indicates that two tables can be used together in a JOIN clause.\nImplementations of this trait will be generated for you automatically by\nthe [association annotations](FIXME: Add link) from codegen.",null,null],[0,"data_types","diesel","Structs to represent the primitive equivalent of SQL types where\nthere is no existing Rust primitive, or where using it would be\nconfusing (such as date and time types). This module will re-export\nall backend specific data structures when compiled against that\nbackend.",null,null],[14,"table","","Specifies that a table exists, and what columns it has. This will create a\nnew public module, with the same name, as the name of the table. In this\nmodule, you&#39;ll find a unit struct named `table`, and a unit struct with the\nnames of each of the columns. In the definition, you can also specify an\nadditional set of columns which exist, but should not be selected by default\n(for example, for things like full text search)",null,null],[14,"debug_sql","","Takes a query QueryFragment expression as an argument and returns a string\nof SQL with placeholders for the dynamic values.",null,null],[14,"print_sql","","Takes takes a query QueryFragment expression as an argument and prints out\nthe SQL with placeholders for the dynamic values.",null,null],[14,"impl_query_id","","",null,null],[14,"infer_schema","","Queries the database for the names of all tables, and calls\n[`infer_table_from_schema!`](macro.infer_table_from_schema.html) for each\none. A schema name can optionally be passed to load from schemas other than\nthe default. If a schema name is given, the inferred tables will be wrapped\nin a module with the same name.",null,null],[14,"infer_table_from_schema","","Establishes a database connection at compile time, loads the schema\ninformation about a table&#39;s columns, and invokes\n[`table!`](macro.table.html) for you automatically. For tables in a schema\nother than the default, the table name should be given as\n`&quot;schema_name.table_name&quot;`.",null,null],[14,"embed_migrations","","This macro will read your migrations at compile time, and embed a module you can use to execute\nthem at runtime without the migration files being present on the file system. This is useful if\nyou would like to use Diesel&#39;s migration infrastructure, but want to ship a single executable\nfile (such as for embedded applications). It can also be used to apply migrations to an in\nmemory database (Diesel does this for its own test suite).",null,null],[14,"impl_AsChangeset","","Implements the [`AsChangeset`][changeset] trait for a given struct. This\nmacro should be called with the name of the table you wish to use the struct\nwith, followed by the entire struct body. This macro mirrors\n`#[as_changeset]` from [`diesel_codegen`][diesel_codegen]",null,null],[14,"BelongsTo","","Defines a one-to-one association for the child table. This macro should be\ncalled with the name of the parent struct, followed by any options, followed\nby the entire struct body. The struct *must* be annotated with\n`#[table_name(name_of_table)]`. Both the parent and child structs must\nimplement [`Identifiable`][identifiable].",null,null],[14,"HasMany","","Defines a one-to-many association for the parent table. This macro is only required if you need\nto join between the two tables. This macro should be called with the name of the child table,\nfollowed by any options, followed by the entire struct body. The struct *must* be annotated with\n`#[table_name(name_of_table)]`. Both the parent and child structs must implement\n[`Identifiable`][identifiable].",null,null],[14,"impl_Identifiable","","Implements the [`Identifiable`][identifiable] trait for a reference to a\ngiven struct. This macro should be called by copy/pasting the definition of\nthe struct into it.",null,null],[14,"impl_Insertable","","Implements the [`Insertable`][insertable] trait for a given struct. This\nmacro should be called with the name of the table you wish to use the struct\nwith, followed by the entire struct body.",null,null],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL\nfunction, which returns a type that you&#39;d like to use an operator on, you\nshould invoke this macro. Unfortunately, Rust disallows us from\nautomatically implementing `Add` and other traits from `std::ops`, under its\norphan rules.",null,null],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new\nSQL functions that return a numeric type, you should invoke this macro that\ntype. Unfortunately, Rust disallows us from automatically implementing `Add`\nfor types which implement `Expression`, under its orphan rules.",null,null],[14,"sql_function","","Declare a sql function for use in your code. Useful if you have your own SQL functions that\nyou&#39;d like to use. You can optionally provide a doc string as well. `$struct_name` should just\nbe any unique name. You will not need to reference it in your code, but it is required due to\nthe fact that [`concat_idents!` is\nuseless](https://github.com/rust-lang/rust/issues/29599#issuecomment-153927167).",null,null],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a\nunit struct, which is an expression representing calling this function. See\n[`now`](expression/dsl/struct.now.html) for example output. `now` was\ngenerated using:",null,null],[14,"infix_predicate","","Useful for libraries adding support for new SQL types. Apps should never\nneed to call this",null,null],[14,"postfix_predicate","","Useful for libraries adding support for new SQL types. Apps should never\nneed to call this.",null,null],[14,"postfix_expression","","",null,null],[11,"fmt","diesel::expression::dsl","",126,null],[11,"clone","","",126,null],[11,"to_sql","","",126,null],[11,"collect_binds","","",126,null],[11,"is_safe_to_cache_prepared","","",126,null],[11,"has_static_query_id","","",126,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"to_sql","","",127,null],[11,"collect_binds","","",127,null],[11,"is_safe_to_cache_prepared","","",127,null],[11,"has_static_query_id","","",127,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"to_sql","","",128,null],[11,"collect_binds","","",128,null],[11,"is_safe_to_cache_prepared","","",128,null],[11,"has_static_query_id","","",128,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"to_sql","","",129,null],[11,"collect_binds","","",129,null],[11,"is_safe_to_cache_prepared","","",129,null],[11,"has_static_query_id","","",129,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"to_sql","","",130,null],[11,"collect_binds","","",130,null],[11,"is_safe_to_cache_prepared","","",130,null],[11,"has_static_query_id","","",130,{"inputs":[],"output":{"name":"bool"}}],[11,"add","","",130,null],[11,"sub","","",130,null],[11,"as_expression","","",130,null],[11,"query_id","diesel::query_builder","",39,{"inputs":[],"output":{"name":"option"}}],[11,"has_static_query_id","","",42,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"metadata","diesel::pg","",79,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"metadata","diesel::sqlite","",95,{"inputs":[],"output":{"name":"sqlitetype"}}],[11,"metadata","diesel::mysql","",70,{"inputs":[],"output":{"name":"mysqltype"}}],[11,"milliseconds","diesel::pg::expression::extensions","Returns a PgInterval representing `self` as milliseconds",77,null],[11,"seconds","","Returns a PgInterval representing `self` as seconds",77,null],[11,"minutes","","Returns a PgInterval representing `self` as minutes",77,null],[11,"hours","","Returns a PgInterval representing `self` as hours",77,null],[11,"microsecond","","Identical to `microseconds`",77,null],[11,"millisecond","","Identical to `milliseconds`",77,null],[11,"second","","Identical to `seconds`",77,null],[11,"minute","","Identical to `minutes`",77,null],[11,"hour","","Identical to `hours`",77,null],[11,"weeks","","Returns a PgInterval representing `self` in weeks",78,null],[11,"years","","Returns a PgInterval representing `self` in weeks",78,null],[11,"day","","Identical to `days`",78,null],[11,"week","","Identical to `weeks`",78,null],[11,"month","","Identical to `months`",78,null],[11,"year","","Identical to `years`",78,null],[11,"has_static_query_id","diesel::pg::types::sql_types","",89,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",88,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",87,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",90,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",91,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",92,{"inputs":[],"output":{"name":"bool"}}],[11,"on_conflict_do_nothing","diesel::pg::upsert","Adds `ON CONFLICT DO NOTHING` to the insert statement, without\nspecifying any columns or constraints to restrict the conflict to.",93,null],[11,"on_conflict","","Adds an `ON CONFLICT` to the insert statement, performing the action\nspecified by `Action` if a conflict occurs for `Target`.",93,null],[11,"into_boxed","diesel::prelude","",114,null],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",115,null],[11,"first","","Attempts to load a single record. Returns `Ok(record)` if found, and\n`Err(NotFound)` if no results are returned. If the query truly is\noptional, you can call `.optional()` on the result of this to get a\n`Result&lt;Option&lt;U&gt;&gt;`.",120,null],[11,"get_results","","Runs the command, returning an `Iterator` over the affected rows.",120,null],[11,"into_boxed","","",114,null],[11,"first","","Attempts to load a single record. Returns `Ok(record)` if found, and\n`Err(NotFound)` if no results are returned. If the query truly is\noptional, you can call `.optional()` on the result of this to get a\n`Result&lt;Option&lt;U&gt;&gt;`.",120,null],[11,"get_results","","Runs the command, returning an `Iterator` over the affected rows.",120,null]],"paths":[[8,"BelongsTo"],[8,"GroupedBy"],[8,"HasTable"],[8,"Identifiable"],[8,"Backend"],[8,"TypeMetadata"],[3,"Debug"],[3,"AnsiTransactionManager"],[8,"TransactionManager"],[8,"SimpleConnection"],[8,"Connection"],[8,"BoolExpressionMethods"],[8,"EscapeExpressionMethods"],[8,"ExpressionMethods"],[8,"TextExpressionMethods"],[3,"IsNull"],[3,"IsNotNull"],[3,"Asc"],[3,"Desc"],[3,"SqlLiteral"],[8,"Expression"],[8,"AsExpression"],[8,"SelectableExpression"],[8,"BoxableExpression"],[3,"RawBytesBindCollector"],[8,"BindCollector"],[8,"WhereAnd"],[3,"NoWhereClause"],[3,"WhereClause"],[8,"IntoInsertStatement"],[3,"IncompleteInsertStatement"],[3,"InsertStatement"],[3,"BatchInsertStatement"],[3,"Insert"],[8,"AsChangeset"],[8,"Changeset"],[8,"IntoUpdateTarget"],[3,"IncompleteUpdateStatement"],[3,"UpdateStatement"],[8,"QueryId"],[8,"QueryBuilder"],[8,"Query"],[8,"QueryFragment"],[8,"AsQuery"],[4,"IsNull"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[3,"Nullable"],[3,"Bool"],[3,"SmallInt"],[3,"Integer"],[3,"BigInt"],[3,"Float"],[3,"Double"],[3,"Text"],[3,"Binary"],[3,"Date"],[3,"Time"],[3,"Timestamp"],[8,"Foldable"],[8,"HasSqlType"],[8,"IntoNullable"],[8,"FromSql"],[8,"FromSqlRow"],[8,"ToSql"],[3,"Numeric"],[3,"Interval"],[4,"MysqlType"],[3,"Mysql"],[3,"MysqlConnection"],[3,"MysqlQueryBuilder"],[3,"PgTypeMetadata"],[8,"PgExpressionMethods"],[8,"ArrayExpressionMethods"],[8,"SortExpressionMethods"],[8,"MicroIntervalDsl"],[8,"DayAndMonthIntervalDsl"],[3,"Pg"],[3,"PgQueryBuilder"],[3,"PgConnection"],[3,"PgTimestamp"],[3,"PgDate"],[3,"PgTime"],[3,"PgInterval"],[4,"PgNumeric"],[3,"Oid"],[3,"Timestamptz"],[3,"Array"],[3,"Uuid"],[3,"Json"],[3,"Jsonb"],[8,"OnConflictExtension"],[4,"SqliteType"],[3,"Sqlite"],[3,"SqliteConnection"],[3,"SqliteQueryBuilder"],[4,"MigrationError"],[4,"RunMigrationsError"],[8,"MigrationConnection"],[8,"Migration"],[8,"Queryable"],[8,"Column"],[8,"Table"],[4,"Error"],[4,"DatabaseErrorKind"],[4,"ConnectionError"],[8,"DatabaseErrorInformation"],[8,"OptionalExtension"],[6,"QueryResult"],[8,"Row"],[8,"Insertable"],[8,"BelongingToDsl"],[8,"BoxedDsl"],[8,"CountDsl"],[8,"DistinctDsl"],[8,"FilterDsl"],[8,"FindDsl"],[8,"LimitDsl"],[8,"LoadDsl"],[8,"ExecuteDsl"],[8,"OffsetDsl"],[8,"OrderDsl"],[8,"SaveChangesDsl"],[8,"SelectDsl"],[3,"Max"],[3,"Min"],[3,"Sum"],[3,"Avg"],[3,"now"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,null],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,null],[11,"format","","Sets the format function for formatting the log output.",0,null],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,null],[11,"init","","Initializes the global logger with an env logger.",0,null],[11,"build","","Build an env logger.",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,null],[11,"enabled","","",1,null],[11,"log","","",1,null]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).","items":[[5,"domain_to_ascii","idna","The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.",null,null],[0,"punycode","","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","[*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,null],[11,"fmt","","",1,null]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",69,null],[11,"clone","","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",70,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",71,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",72,null],[11,"clone","","",73,null],[11,"clone","","",74,null],[11,"clone","","",75,null],[11,"clone","","",76,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",77,null],[11,"clone","","",41,null],[11,"clone","","",78,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",79,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["libsqlite3_sys"] = {"doc":"","items":[[3,"sqlite3_file","libsqlite3_sys","",null,null],[12,"pMethods","","",0,null],[3,"sqlite3_io_methods","","",null,null],[12,"iVersion","","",1,null],[12,"xClose","","",1,null],[12,"xRead","","",1,null],[12,"xWrite","","",1,null],[12,"xTruncate","","",1,null],[12,"xSync","","",1,null],[12,"xFileSize","","",1,null],[12,"xLock","","",1,null],[12,"xUnlock","","",1,null],[12,"xCheckReservedLock","","",1,null],[12,"xFileControl","","",1,null],[12,"xSectorSize","","",1,null],[12,"xDeviceCharacteristics","","",1,null],[12,"xShmMap","","",1,null],[12,"xShmLock","","",1,null],[12,"xShmBarrier","","",1,null],[12,"xShmUnmap","","",1,null],[12,"xFetch","","",1,null],[12,"xUnfetch","","",1,null],[3,"sqlite3_vfs","","",null,null],[12,"iVersion","","",2,null],[12,"szOsFile","","",2,null],[12,"mxPathname","","",2,null],[12,"pNext","","",2,null],[12,"zName","","",2,null],[12,"pAppData","","",2,null],[12,"xOpen","","",2,null],[12,"xDelete","","",2,null],[12,"xAccess","","",2,null],[12,"xFullPathname","","",2,null],[12,"xDlOpen","","",2,null],[12,"xDlError","","",2,null],[12,"xDlSym","","",2,null],[12,"xDlClose","","",2,null],[12,"xRandomness","","",2,null],[12,"xSleep","","",2,null],[12,"xCurrentTime","","",2,null],[12,"xGetLastError","","",2,null],[12,"xCurrentTimeInt64","","",2,null],[12,"xSetSystemCall","","",2,null],[12,"xGetSystemCall","","",2,null],[12,"xNextSystemCall","","",2,null],[3,"sqlite3_mem_methods","","",null,null],[12,"xMalloc","","",3,null],[12,"xFree","","",3,null],[12,"xRealloc","","",3,null],[12,"xSize","","",3,null],[12,"xRoundup","","",3,null],[12,"xInit","","",3,null],[12,"xShutdown","","",3,null],[12,"pAppData","","",3,null],[3,"sqlite3_module","","",null,null],[12,"iVersion","","",4,null],[12,"xCreate","","",4,null],[12,"xConnect","","",4,null],[12,"xBestIndex","","",4,null],[12,"xDisconnect","","",4,null],[12,"xDestroy","","",4,null],[12,"xOpen","","",4,null],[12,"xClose","","",4,null],[12,"xFilter","","",4,null],[12,"xNext","","",4,null],[12,"xEof","","",4,null],[12,"xColumn","","",4,null],[12,"xRowid","","",4,null],[12,"xUpdate","","",4,null],[12,"xBegin","","",4,null],[12,"xSync","","",4,null],[12,"xCommit","","",4,null],[12,"xRollback","","",4,null],[12,"xFindFunction","","",4,null],[12,"xRename","","",4,null],[12,"xSavepoint","","",4,null],[12,"xRelease","","",4,null],[12,"xRollbackTo","","",4,null],[3,"sqlite3_index_info","","",null,null],[12,"nConstraint","","",5,null],[12,"aConstraint","","",5,null],[12,"nOrderBy","","",5,null],[12,"aOrderBy","","",5,null],[12,"aConstraintUsage","","",5,null],[12,"idxNum","","",5,null],[12,"idxStr","","",5,null],[12,"needToFreeIdxStr","","",5,null],[12,"orderByConsumed","","",5,null],[12,"estimatedCost","","",5,null],[12,"estimatedRows","","",5,null],[12,"idxFlags","","",5,null],[12,"colUsed","","",5,null],[3,"sqlite3_index_constraint","","",null,null],[12,"iColumn","","",6,null],[12,"op","","",6,null],[12,"usable","","",6,null],[12,"iTermOffset","","",6,null],[3,"sqlite3_index_orderby","","",null,null],[12,"iColumn","","",7,null],[12,"desc","","",7,null],[3,"sqlite3_index_constraint_usage","","",null,null],[12,"argvIndex","","",8,null],[12,"omit","","",8,null],[3,"sqlite3_vtab","","",null,null],[12,"pModule","","",9,null],[12,"nRef","","",9,null],[12,"zErrMsg","","",9,null],[3,"sqlite3_vtab_cursor","","",null,null],[12,"pVtab","","",10,null],[3,"sqlite3_mutex_methods","","",null,null],[12,"xMutexInit","","",11,null],[12,"xMutexEnd","","",11,null],[12,"xMutexAlloc","","",11,null],[12,"xMutexFree","","",11,null],[12,"xMutexEnter","","",11,null],[12,"xMutexTry","","",11,null],[12,"xMutexLeave","","",11,null],[12,"xMutexHeld","","",11,null],[12,"xMutexNotheld","","",11,null],[3,"sqlite3_pcache_page","","",null,null],[12,"pBuf","","",12,null],[12,"pExtra","","",12,null],[3,"sqlite3_pcache_methods2","","",null,null],[12,"iVersion","","",13,null],[12,"pArg","","",13,null],[12,"xInit","","",13,null],[12,"xShutdown","","",13,null],[12,"xCreate","","",13,null],[12,"xCachesize","","",13,null],[12,"xPagecount","","",13,null],[12,"xFetch","","",13,null],[12,"xUnpin","","",13,null],[12,"xRekey","","",13,null],[12,"xTruncate","","",13,null],[12,"xDestroy","","",13,null],[12,"xShrink","","",13,null],[3,"sqlite3_pcache_methods","","",null,null],[12,"pArg","","",14,null],[12,"xInit","","",14,null],[12,"xShutdown","","",14,null],[12,"xCreate","","",14,null],[12,"xCachesize","","",14,null],[12,"xPagecount","","",14,null],[12,"xFetch","","",14,null],[12,"xUnpin","","",14,null],[12,"xRekey","","",14,null],[12,"xTruncate","","",14,null],[12,"xDestroy","","",14,null],[3,"sqlite3_rtree_geometry","","",null,null],[12,"pContext","","",15,null],[12,"nParam","","",15,null],[12,"aParam","","",15,null],[12,"pUser","","",15,null],[12,"xDelUser","","",15,null],[3,"sqlite3_rtree_query_info","","",null,null],[12,"pContext","","",16,null],[12,"nParam","","",16,null],[12,"aParam","","",16,null],[12,"pUser","","",16,null],[12,"xDelUser","","",16,null],[12,"aCoord","","",16,null],[12,"anQueue","","",16,null],[12,"nCoord","","",16,null],[12,"iLevel","","",16,null],[12,"mxLevel","","",16,null],[12,"iRowid","","",16,null],[12,"rParentScore","","",16,null],[12,"eParentWithin","","",16,null],[12,"eWithin","","",16,null],[12,"rScore","","",16,null],[12,"apSqlParam","","",16,null],[3,"Fts5PhraseIter","","",null,null],[12,"a","","",17,null],[12,"b","","",17,null],[3,"Fts5ExtensionApi","","",null,null],[12,"iVersion","","",18,null],[12,"xUserData","","",18,null],[12,"xColumnCount","","",18,null],[12,"xRowCount","","",18,null],[12,"xColumnTotalSize","","",18,null],[12,"xTokenize","","",18,null],[12,"xPhraseCount","","",18,null],[12,"xPhraseSize","","",18,null],[12,"xInstCount","","",18,null],[12,"xInst","","",18,null],[12,"xRowid","","",18,null],[12,"xColumnText","","",18,null],[12,"xColumnSize","","",18,null],[12,"xQueryPhrase","","",18,null],[12,"xSetAuxdata","","",18,null],[12,"xGetAuxdata","","",18,null],[12,"xPhraseFirst","","",18,null],[12,"xPhraseNext","","",18,null],[12,"xPhraseFirstColumn","","",18,null],[12,"xPhraseNextColumn","","",18,null],[3,"fts5_tokenizer","","",null,null],[12,"xCreate","","",19,null],[12,"xDelete","","",19,null],[12,"xTokenize","","",19,null],[3,"fts5_api","","",null,null],[12,"iVersion","","",20,null],[12,"xCreateTokenizer","","",20,null],[12,"xFindTokenizer","","",20,null],[12,"xCreateFunction","","",20,null],[3,"__va_list_tag","","",null,null],[12,"gp_offset","","",21,null],[12,"fp_offset","","",21,null],[12,"overflow_arg_area","","",21,null],[12,"reg_save_area","","",21,null],[3,"Error","","",null,null],[12,"code","","",22,null],[12,"extended_code","","",22,null],[4,"sqlite3","","",null,null],[4,"sqlite3_mutex","","",null,null],[4,"sqlite3_stmt","","",null,null],[4,"Mem","","",null,null],[4,"sqlite3_context","","",null,null],[4,"sqlite3_blob","","",null,null],[4,"sqlite3_pcache","","",null,null],[4,"sqlite3_backup","","",null,null],[4,"sqlite3_snapshot","","",null,null],[4,"Fts5Context","","",null,null],[4,"Fts5Tokenizer","","",null,null],[4,"ErrorCode","","",null,null],[13,"InternalMalfunction","","",23,null],[13,"PermissionDenied","","",23,null],[13,"OperationAborted","","",23,null],[13,"DatabaseBusy","","",23,null],[13,"DatabaseLocked","","",23,null],[13,"OutOfMemory","","",23,null],[13,"ReadOnly","","",23,null],[13,"OperationInterrupted","","",23,null],[13,"SystemIOFailure","","",23,null],[13,"DatabaseCorrupt","","",23,null],[13,"NotFound","","",23,null],[13,"DiskFull","","",23,null],[13,"CannotOpen","","",23,null],[13,"FileLockingProtocolFailed","","",23,null],[13,"SchemaChanged","","",23,null],[13,"TooBig","","",23,null],[13,"ConstraintViolation","","",23,null],[13,"TypeMismatch","","",23,null],[13,"APIMisuse","","",23,null],[13,"NoLargeFileSupport","","",23,null],[13,"AuthorizationForStatementDenied","","",23,null],[13,"ParameterOutOfRange","","",23,null],[13,"NotADatabase","","",23,null],[13,"Unknown","","",23,null],[5,"code_to_str","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"str"}}],[5,"SQLITE_STATIC","","",null,{"inputs":[],"output":{"name":"sqlite3_destructor_type"}}],[5,"SQLITE_TRANSIENT","","",null,{"inputs":[],"output":{"name":"sqlite3_destructor_type"}}],[7,"sqlite3_version","","",null,null],[7,"sqlite3_temp_directory","","",null,null],[7,"sqlite3_data_directory","","",null,null],[5,"sqlite3_libversion","","",null,null],[5,"sqlite3_sourceid","","",null,null],[5,"sqlite3_libversion_number","","",null,null],[5,"sqlite3_compileoption_used","","",null,null],[5,"sqlite3_compileoption_get","","",null,null],[5,"sqlite3_threadsafe","","",null,null],[5,"sqlite3_close","","",null,null],[5,"sqlite3_close_v2","","",null,null],[5,"sqlite3_exec","","",null,null],[5,"sqlite3_initialize","","",null,null],[5,"sqlite3_shutdown","","",null,null],[5,"sqlite3_os_init","","",null,null],[5,"sqlite3_os_end","","",null,null],[5,"sqlite3_config","","",null,null],[5,"sqlite3_db_config","","",null,null],[5,"sqlite3_extended_result_codes","","",null,null],[5,"sqlite3_last_insert_rowid","","",null,null],[5,"sqlite3_changes","","",null,null],[5,"sqlite3_total_changes","","",null,null],[5,"sqlite3_interrupt","","",null,null],[5,"sqlite3_complete","","",null,null],[5,"sqlite3_complete16","","",null,null],[5,"sqlite3_busy_handler","","",null,null],[5,"sqlite3_busy_timeout","","",null,null],[5,"sqlite3_get_table","","",null,null],[5,"sqlite3_free_table","","",null,null],[5,"sqlite3_mprintf","","",null,null],[5,"sqlite3_vmprintf","","",null,null],[5,"sqlite3_snprintf","","",null,null],[5,"sqlite3_vsnprintf","","",null,null],[5,"sqlite3_malloc","","",null,null],[5,"sqlite3_malloc64","","",null,null],[5,"sqlite3_realloc","","",null,null],[5,"sqlite3_realloc64","","",null,null],[5,"sqlite3_free","","",null,null],[5,"sqlite3_msize","","",null,null],[5,"sqlite3_memory_used","","",null,null],[5,"sqlite3_memory_highwater","","",null,null],[5,"sqlite3_randomness","","",null,null],[5,"sqlite3_set_authorizer","","",null,null],[5,"sqlite3_trace","","",null,null],[5,"sqlite3_profile","","",null,null],[5,"sqlite3_progress_handler","","",null,null],[5,"sqlite3_open","","",null,null],[5,"sqlite3_open16","","",null,null],[5,"sqlite3_open_v2","","",null,null],[5,"sqlite3_uri_parameter","","",null,null],[5,"sqlite3_uri_boolean","","",null,null],[5,"sqlite3_uri_int64","","",null,null],[5,"sqlite3_errcode","","",null,null],[5,"sqlite3_extended_errcode","","",null,null],[5,"sqlite3_errmsg","","",null,null],[5,"sqlite3_errmsg16","","",null,null],[5,"sqlite3_errstr","","",null,null],[5,"sqlite3_limit","","",null,null],[5,"sqlite3_prepare","","",null,null],[5,"sqlite3_prepare_v2","","",null,null],[5,"sqlite3_prepare16","","",null,null],[5,"sqlite3_prepare16_v2","","",null,null],[5,"sqlite3_sql","","",null,null],[5,"sqlite3_stmt_readonly","","",null,null],[5,"sqlite3_stmt_busy","","",null,null],[5,"sqlite3_bind_blob","","",null,null],[5,"sqlite3_bind_blob64","","",null,null],[5,"sqlite3_bind_double","","",null,null],[5,"sqlite3_bind_int","","",null,null],[5,"sqlite3_bind_int64","","",null,null],[5,"sqlite3_bind_null","","",null,null],[5,"sqlite3_bind_text","","",null,null],[5,"sqlite3_bind_text16","","",null,null],[5,"sqlite3_bind_text64","","",null,null],[5,"sqlite3_bind_value","","",null,null],[5,"sqlite3_bind_zeroblob","","",null,null],[5,"sqlite3_bind_zeroblob64","","",null,null],[5,"sqlite3_bind_parameter_count","","",null,null],[5,"sqlite3_bind_parameter_name","","",null,null],[5,"sqlite3_bind_parameter_index","","",null,null],[5,"sqlite3_clear_bindings","","",null,null],[5,"sqlite3_column_count","","",null,null],[5,"sqlite3_column_name","","",null,null],[5,"sqlite3_column_name16","","",null,null],[5,"sqlite3_column_database_name","","",null,null],[5,"sqlite3_column_database_name16","","",null,null],[5,"sqlite3_column_table_name","","",null,null],[5,"sqlite3_column_table_name16","","",null,null],[5,"sqlite3_column_origin_name","","",null,null],[5,"sqlite3_column_origin_name16","","",null,null],[5,"sqlite3_column_decltype","","",null,null],[5,"sqlite3_column_decltype16","","",null,null],[5,"sqlite3_step","","",null,null],[5,"sqlite3_data_count","","",null,null],[5,"sqlite3_column_blob","","",null,null],[5,"sqlite3_column_bytes","","",null,null],[5,"sqlite3_column_bytes16","","",null,null],[5,"sqlite3_column_double","","",null,null],[5,"sqlite3_column_int","","",null,null],[5,"sqlite3_column_int64","","",null,null],[5,"sqlite3_column_text","","",null,null],[5,"sqlite3_column_text16","","",null,null],[5,"sqlite3_column_type","","",null,null],[5,"sqlite3_column_value","","",null,null],[5,"sqlite3_finalize","","",null,null],[5,"sqlite3_reset","","",null,null],[5,"sqlite3_create_function","","",null,null],[5,"sqlite3_create_function16","","",null,null],[5,"sqlite3_create_function_v2","","",null,null],[5,"sqlite3_aggregate_count","","",null,null],[5,"sqlite3_expired","","",null,null],[5,"sqlite3_transfer_bindings","","",null,null],[5,"sqlite3_global_recover","","",null,null],[5,"sqlite3_thread_cleanup","","",null,null],[5,"sqlite3_memory_alarm","","",null,null],[5,"sqlite3_value_blob","","",null,null],[5,"sqlite3_value_bytes","","",null,null],[5,"sqlite3_value_bytes16","","",null,null],[5,"sqlite3_value_double","","",null,null],[5,"sqlite3_value_int","","",null,null],[5,"sqlite3_value_int64","","",null,null],[5,"sqlite3_value_text","","",null,null],[5,"sqlite3_value_text16","","",null,null],[5,"sqlite3_value_text16le","","",null,null],[5,"sqlite3_value_text16be","","",null,null],[5,"sqlite3_value_type","","",null,null],[5,"sqlite3_value_numeric_type","","",null,null],[5,"sqlite3_value_subtype","","",null,null],[5,"sqlite3_value_dup","","",null,null],[5,"sqlite3_value_free","","",null,null],[5,"sqlite3_aggregate_context","","",null,null],[5,"sqlite3_user_data","","",null,null],[5,"sqlite3_context_db_handle","","",null,null],[5,"sqlite3_get_auxdata","","",null,null],[5,"sqlite3_set_auxdata","","",null,null],[5,"sqlite3_result_blob","","",null,null],[5,"sqlite3_result_blob64","","",null,null],[5,"sqlite3_result_double","","",null,null],[5,"sqlite3_result_error","","",null,null],[5,"sqlite3_result_error16","","",null,null],[5,"sqlite3_result_error_toobig","","",null,null],[5,"sqlite3_result_error_nomem","","",null,null],[5,"sqlite3_result_error_code","","",null,null],[5,"sqlite3_result_int","","",null,null],[5,"sqlite3_result_int64","","",null,null],[5,"sqlite3_result_null","","",null,null],[5,"sqlite3_result_text","","",null,null],[5,"sqlite3_result_text64","","",null,null],[5,"sqlite3_result_text16","","",null,null],[5,"sqlite3_result_text16le","","",null,null],[5,"sqlite3_result_text16be","","",null,null],[5,"sqlite3_result_value","","",null,null],[5,"sqlite3_result_zeroblob","","",null,null],[5,"sqlite3_result_zeroblob64","","",null,null],[5,"sqlite3_result_subtype","","",null,null],[5,"sqlite3_create_collation","","",null,null],[5,"sqlite3_create_collation_v2","","",null,null],[5,"sqlite3_create_collation16","","",null,null],[5,"sqlite3_collation_needed","","",null,null],[5,"sqlite3_collation_needed16","","",null,null],[5,"sqlite3_sleep","","",null,null],[5,"sqlite3_get_autocommit","","",null,null],[5,"sqlite3_db_handle","","",null,null],[5,"sqlite3_db_filename","","",null,null],[5,"sqlite3_db_readonly","","",null,null],[5,"sqlite3_next_stmt","","",null,null],[5,"sqlite3_commit_hook","","",null,null],[5,"sqlite3_rollback_hook","","",null,null],[5,"sqlite3_update_hook","","",null,null],[5,"sqlite3_enable_shared_cache","","",null,null],[5,"sqlite3_release_memory","","",null,null],[5,"sqlite3_db_release_memory","","",null,null],[5,"sqlite3_soft_heap_limit64","","",null,null],[5,"sqlite3_soft_heap_limit","","",null,null],[5,"sqlite3_table_column_metadata","","",null,null],[5,"sqlite3_load_extension","","",null,null],[5,"sqlite3_enable_load_extension","","",null,null],[5,"sqlite3_auto_extension","","",null,null],[5,"sqlite3_cancel_auto_extension","","",null,null],[5,"sqlite3_reset_auto_extension","","",null,null],[5,"sqlite3_create_module","","",null,null],[5,"sqlite3_create_module_v2","","",null,null],[5,"sqlite3_declare_vtab","","",null,null],[5,"sqlite3_overload_function","","",null,null],[5,"sqlite3_blob_open","","",null,null],[5,"sqlite3_blob_reopen","","",null,null],[5,"sqlite3_blob_close","","",null,null],[5,"sqlite3_blob_bytes","","",null,null],[5,"sqlite3_blob_read","","",null,null],[5,"sqlite3_blob_write","","",null,null],[5,"sqlite3_vfs_find","","",null,null],[5,"sqlite3_vfs_register","","",null,null],[5,"sqlite3_vfs_unregister","","",null,null],[5,"sqlite3_mutex_alloc","","",null,null],[5,"sqlite3_mutex_free","","",null,null],[5,"sqlite3_mutex_enter","","",null,null],[5,"sqlite3_mutex_try","","",null,null],[5,"sqlite3_mutex_leave","","",null,null],[5,"sqlite3_mutex_held","","",null,null],[5,"sqlite3_mutex_notheld","","",null,null],[5,"sqlite3_db_mutex","","",null,null],[5,"sqlite3_file_control","","",null,null],[5,"sqlite3_test_control","","",null,null],[5,"sqlite3_status","","",null,null],[5,"sqlite3_status64","","",null,null],[5,"sqlite3_db_status","","",null,null],[5,"sqlite3_stmt_status","","",null,null],[5,"sqlite3_backup_init","","",null,null],[5,"sqlite3_backup_step","","",null,null],[5,"sqlite3_backup_finish","","",null,null],[5,"sqlite3_backup_remaining","","",null,null],[5,"sqlite3_backup_pagecount","","",null,null],[5,"sqlite3_unlock_notify","","",null,null],[5,"sqlite3_stricmp","","",null,null],[5,"sqlite3_strnicmp","","",null,null],[5,"sqlite3_strglob","","",null,null],[5,"sqlite3_strlike","","",null,null],[5,"sqlite3_log","","",null,null],[5,"sqlite3_wal_hook","","",null,null],[5,"sqlite3_wal_autocheckpoint","","",null,null],[5,"sqlite3_wal_checkpoint","","",null,null],[5,"sqlite3_wal_checkpoint_v2","","",null,null],[5,"sqlite3_vtab_config","","",null,null],[5,"sqlite3_vtab_on_conflict","","",null,null],[5,"sqlite3_stmt_scanstatus","","",null,null],[5,"sqlite3_stmt_scanstatus_reset","","",null,null],[5,"sqlite3_db_cacheflush","","",null,null],[5,"sqlite3_preupdate_hook","","",null,null],[5,"sqlite3_preupdate_old","","",null,null],[5,"sqlite3_preupdate_count","","",null,null],[5,"sqlite3_preupdate_depth","","",null,null],[5,"sqlite3_preupdate_new","","",null,null],[5,"sqlite3_system_errno","","",null,null],[5,"sqlite3_snapshot_get","","",null,null],[5,"sqlite3_snapshot_open","","",null,null],[5,"sqlite3_snapshot_free","","",null,null],[5,"sqlite3_snapshot_cmp","","",null,null],[5,"sqlite3_rtree_geometry_callback","","",null,null],[5,"sqlite3_rtree_query_callback","","",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"eq","","",23,null],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"new","","",22,{"inputs":[{"name":"c_int"}],"output":{"name":"error"}}],[11,"fmt","","",22,null],[11,"description","","",22,null],[6,"__gnuc_va_list","","",null,null],[6,"va_list","","",null,null],[6,"Struct_sqlite3","","",null,null],[6,"sqlite_int64","","",null,null],[6,"sqlite_uint64","","",null,null],[6,"sqlite3_int64","","",null,null],[6,"sqlite3_uint64","","",null,null],[6,"sqlite3_callback","","",null,null],[6,"sqlite3_syscall_ptr","","",null,null],[6,"sqlite3_value","","",null,null],[6,"sqlite3_destructor_type","","",null,null],[6,"sqlite3_rtree_dbl","","",null,null],[6,"fts5_extension_function","","",null,null],[6,"__builtin_va_list","","",null,null],[17,"SQLITE_OK","","",null,null],[17,"SQLITE_ERROR","","",null,null],[17,"SQLITE_INTERNAL","","",null,null],[17,"SQLITE_PERM","","",null,null],[17,"SQLITE_ABORT","","",null,null],[17,"SQLITE_BUSY","","",null,null],[17,"SQLITE_LOCKED","","",null,null],[17,"SQLITE_NOMEM","","",null,null],[17,"SQLITE_READONLY","","",null,null],[17,"SQLITE_INTERRUPT","","",null,null],[17,"SQLITE_IOERR","","",null,null],[17,"SQLITE_CORRUPT","","",null,null],[17,"SQLITE_NOTFOUND","","",null,null],[17,"SQLITE_FULL","","",null,null],[17,"SQLITE_CANTOPEN","","",null,null],[17,"SQLITE_PROTOCOL","","",null,null],[17,"SQLITE_EMPTY","","",null,null],[17,"SQLITE_SCHEMA","","",null,null],[17,"SQLITE_TOOBIG","","",null,null],[17,"SQLITE_CONSTRAINT","","",null,null],[17,"SQLITE_MISMATCH","","",null,null],[17,"SQLITE_MISUSE","","",null,null],[17,"SQLITE_NOLFS","","",null,null],[17,"SQLITE_AUTH","","",null,null],[17,"SQLITE_FORMAT","","",null,null],[17,"SQLITE_RANGE","","",null,null],[17,"SQLITE_NOTADB","","",null,null],[17,"SQLITE_NOTICE","","",null,null],[17,"SQLITE_WARNING","","",null,null],[17,"SQLITE_ROW","","",null,null],[17,"SQLITE_DONE","","",null,null],[17,"SQLITE_IOERR_READ","","",null,null],[17,"SQLITE_IOERR_SHORT_READ","","",null,null],[17,"SQLITE_IOERR_WRITE","","",null,null],[17,"SQLITE_IOERR_FSYNC","","",null,null],[17,"SQLITE_IOERR_DIR_FSYNC","","",null,null],[17,"SQLITE_IOERR_TRUNCATE","","",null,null],[17,"SQLITE_IOERR_FSTAT","","",null,null],[17,"SQLITE_IOERR_UNLOCK","","",null,null],[17,"SQLITE_IOERR_RDLOCK","","",null,null],[17,"SQLITE_IOERR_DELETE","","",null,null],[17,"SQLITE_IOERR_BLOCKED","","",null,null],[17,"SQLITE_IOERR_NOMEM","","",null,null],[17,"SQLITE_IOERR_ACCESS","","",null,null],[17,"SQLITE_IOERR_CHECKRESERVEDLOCK","","",null,null],[17,"SQLITE_IOERR_LOCK","","",null,null],[17,"SQLITE_IOERR_CLOSE","","",null,null],[17,"SQLITE_IOERR_DIR_CLOSE","","",null,null],[17,"SQLITE_IOERR_SHMOPEN","","",null,null],[17,"SQLITE_IOERR_SHMSIZE","","",null,null],[17,"SQLITE_IOERR_SHMLOCK","","",null,null],[17,"SQLITE_IOERR_SHMMAP","","",null,null],[17,"SQLITE_IOERR_SEEK","","",null,null],[17,"SQLITE_IOERR_DELETE_NOENT","","",null,null],[17,"SQLITE_IOERR_MMAP","","",null,null],[17,"SQLITE_IOERR_GETTEMPPATH","","",null,null],[17,"SQLITE_IOERR_CONVPATH","","",null,null],[17,"SQLITE_IOERR_VNODE","","",null,null],[17,"SQLITE_LOCKED_SHAREDCACHE","","",null,null],[17,"SQLITE_BUSY_RECOVERY","","",null,null],[17,"SQLITE_BUSY_SNAPSHOT","","",null,null],[17,"SQLITE_CANTOPEN_NOTEMPDIR","","",null,null],[17,"SQLITE_CANTOPEN_ISDIR","","",null,null],[17,"SQLITE_CANTOPEN_FULLPATH","","",null,null],[17,"SQLITE_CANTOPEN_CONVPATH","","",null,null],[17,"SQLITE_CORRUPT_VTAB","","",null,null],[17,"SQLITE_READONLY_RECOVERY","","",null,null],[17,"SQLITE_READONLY_CANTLOCK","","",null,null],[17,"SQLITE_READONLY_ROLLBACK","","",null,null],[17,"SQLITE_READONLY_DBMOVED","","",null,null],[17,"SQLITE_ABORT_ROLLBACK","","",null,null],[17,"SQLITE_CONSTRAINT_CHECK","","",null,null],[17,"SQLITE_CONSTRAINT_COMMITHOOK","","",null,null],[17,"SQLITE_CONSTRAINT_FOREIGNKEY","","",null,null],[17,"SQLITE_CONSTRAINT_FUNCTION","","",null,null],[17,"SQLITE_CONSTRAINT_NOTNULL","","",null,null],[17,"SQLITE_CONSTRAINT_PRIMARYKEY","","",null,null],[17,"SQLITE_CONSTRAINT_TRIGGER","","",null,null],[17,"SQLITE_CONSTRAINT_UNIQUE","","",null,null],[17,"SQLITE_CONSTRAINT_VTAB","","",null,null],[17,"SQLITE_CONSTRAINT_ROWID","","",null,null],[17,"SQLITE_NOTICE_RECOVER_WAL","","",null,null],[17,"SQLITE_NOTICE_RECOVER_ROLLBACK","","",null,null],[17,"SQLITE_WARNING_AUTOINDEX","","",null,null],[17,"SQLITE_AUTH_USER","","",null,null],[17,"SQLITE_INTEGER","","",null,null],[17,"SQLITE_FLOAT","","",null,null],[17,"SQLITE_TEXT","","",null,null],[17,"SQLITE_BLOB","","",null,null],[17,"SQLITE_NULL","","",null,null],[17,"SQLITE_CONFIG_LOG","","",null,null],[17,"SQLITE_UTF8","","",null,null],[17,"SQLITE_DETERMINISTIC","","",null,null]],"paths":[[3,"sqlite3_file"],[3,"sqlite3_io_methods"],[3,"sqlite3_vfs"],[3,"sqlite3_mem_methods"],[3,"sqlite3_module"],[3,"sqlite3_index_info"],[3,"sqlite3_index_constraint"],[3,"sqlite3_index_orderby"],[3,"sqlite3_index_constraint_usage"],[3,"sqlite3_vtab"],[3,"sqlite3_vtab_cursor"],[3,"sqlite3_mutex_methods"],[3,"sqlite3_pcache_page"],[3,"sqlite3_pcache_methods2"],[3,"sqlite3_pcache_methods"],[3,"sqlite3_rtree_geometry"],[3,"sqlite3_rtree_query_info"],[3,"Fts5PhraseIter"],[3,"Fts5ExtensionApi"],[3,"fts5_tokenizer"],[3,"fts5_api"],[3,"__va_list_tag"],[3,"Error"],[4,"ErrorCode"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","",null,null],[14,"_matches_tt_as_expr_hack","","Work around &quot;error: unexpected token: `an interpolated tt`&quot;, whatever that means.",null,null],[14,"assert_matches","","",null,null],[14,"debug_assert_matches","","",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["mysqlclient_sys"] = {"doc":"","items":[[3,"__BindgenUnionField","mysqlclient_sys","",null,null],[3,"st_vio","","",null,null],[3,"st_net","","",null,null],[12,"vio","","",0,null],[12,"buff","","",0,null],[12,"buff_end","","",0,null],[12,"write_pos","","",0,null],[12,"read_pos","","",0,null],[12,"fd","","",0,null],[12,"remain_in_buf","","",0,null],[12,"length","","",0,null],[12,"buf_length","","",0,null],[12,"where_b","","",0,null],[12,"max_packet","","",0,null],[12,"max_packet_size","","",0,null],[12,"pkt_nr","","",0,null],[12,"compress_pkt_nr","","",0,null],[12,"write_timeout","","",0,null],[12,"read_timeout","","",0,null],[12,"retry_count","","",0,null],[12,"fcntl","","",0,null],[12,"return_status","","",0,null],[12,"reading_or_writing","","",0,null],[12,"save_char","","",0,null],[12,"unused1","","",0,null],[12,"unused2","","",0,null],[12,"compress","","",0,null],[12,"unused3","","",0,null],[12,"unused","","",0,null],[12,"last_errno","","",0,null],[12,"error","","",0,null],[12,"unused4","","",0,null],[12,"unused5","","",0,null],[12,"last_error","","Client library error message buffer. Actually belongs to struct MYSQL.",0,null],[12,"sqlstate","","Client library sqlstate buffer. Set along with the error message.",0,null],[12,"extension","","Extension pointer, for the caller private use.\nAny program linking with the networking library can use this pointer,\nwhich is handy when private connection specific data needs to be\nmaintained.\nThe mysqld server process uses this pointer internally,\nto maintain the server internal instrumentation for the connection.",0,null],[3,"st_mysql_time","","",null,null],[12,"year","","",1,null],[12,"month","","",1,null],[12,"day","","",1,null],[12,"hour","","",1,null],[12,"minute","","",1,null],[12,"second","","",1,null],[12,"second_part","","&lt; microseconds",1,null],[12,"neg","","",1,null],[12,"time_type","","",1,null],[3,"st_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[12,"data","","",2,null],[3,"st_mysql_client_plugin","","",null,null],[12,"type_","","",3,null],[12,"interface_version","","",3,null],[12,"name","","",3,null],[12,"author","","",3,null],[12,"desc","","",3,null],[12,"version","","",3,null],[12,"license","","",3,null],[12,"mysql_api","","",3,null],[12,"init","","",3,null],[12,"deinit","","",3,null],[12,"options","","",3,null],[3,"st_mysql","","",null,null],[12,"net","","",4,null],[12,"connector_fd","","",4,null],[12,"host","","",4,null],[12,"user","","",4,null],[12,"passwd","","",4,null],[12,"unix_socket","","",4,null],[12,"server_version","","",4,null],[12,"host_info","","",4,null],[12,"info","","",4,null],[12,"db","","",4,null],[12,"charset","","",4,null],[12,"fields","","",4,null],[12,"field_alloc","","",4,null],[12,"affected_rows","","",4,null],[12,"insert_id","","",4,null],[12,"extra_info","","",4,null],[12,"thread_id","","",4,null],[12,"packet_length","","",4,null],[12,"port","","",4,null],[12,"client_flag","","",4,null],[12,"server_capabilities","","",4,null],[12,"protocol_version","","",4,null],[12,"field_count","","",4,null],[12,"server_status","","",4,null],[12,"server_language","","",4,null],[12,"warning_count","","",4,null],[12,"options","","",4,null],[12,"status","","",4,null],[12,"free_me","","",4,null],[12,"reconnect","","",4,null],[12,"scramble","","",4,null],[12,"unused1","","",4,null],[12,"unused2","","",4,null],[12,"unused3","","",4,null],[12,"unused4","","",4,null],[12,"unused5","","",4,null],[12,"stmts","","",4,null],[12,"methods","","",4,null],[12,"thd","","",4,null],[12,"unbuffered_fetch_owner","","",4,null],[12,"info_buffer","","",4,null],[12,"extension","","",4,null],[3,"st_mysql_charset_info_st","","",null,null],[3,"st_plugin_vio_info","","",null,null],[12,"protocol","","",5,null],[12,"socket","","&lt; it&#39;s set, if the protocol is SOCKET or TCP",5,null],[3,"st_plugin_vio","","Provides plugin access to communication channel",null,null],[12,"read_packet","","Plugin provides a pointer reference and this function sets it to the\ncontents of any incoming packet. Returns the packet length, or -1 if\nthe plugin should terminate.",6,null],[12,"write_packet","","Plugin provides a buffer with data and the length and this\nfunction sends it as a packet. Returns 0 on success, 1 on failure.",6,null],[12,"info","","Fills in a st_plugin_vio_info structure, providing the information\nabout the connection.",6,null],[3,"st_mysql_field","","",null,null],[12,"name","","",7,null],[12,"org_name","","",7,null],[12,"table","","",7,null],[12,"org_table","","",7,null],[12,"db","","",7,null],[12,"catalog","","",7,null],[12,"def","","",7,null],[12,"length","","",7,null],[12,"max_length","","",7,null],[12,"name_length","","",7,null],[12,"org_name_length","","",7,null],[12,"table_length","","",7,null],[12,"org_table_length","","",7,null],[12,"db_length","","",7,null],[12,"catalog_length","","",7,null],[12,"def_length","","",7,null],[12,"flags","","",7,null],[12,"decimals","","",7,null],[12,"charsetnr","","",7,null],[12,"type_","","",7,null],[12,"extension","","",7,null],[3,"st_used_mem","","",null,null],[12,"next","","",8,null],[12,"left","","",8,null],[12,"size","","",8,null],[3,"st_mem_root","","",null,null],[12,"free","","",9,null],[12,"used","","",9,null],[12,"pre_alloc","","",9,null],[12,"min_malloc","","",9,null],[12,"block_size","","",9,null],[12,"block_num","","",9,null],[12,"first_block_usage","","",9,null],[12,"max_capacity","","",9,null],[12,"allocated_size","","",9,null],[12,"error_for_capacity_exceeded","","",9,null],[12,"error_handler","","",9,null],[12,"m_psi_key","","",9,null],[3,"st_mysql_rows","","",null,null],[12,"next","","",10,null],[12,"data","","",10,null],[12,"length","","",10,null],[3,"embedded_query_result","","",null,null],[3,"st_mysql_data","","",null,null],[12,"data","","",11,null],[12,"embedded_info","","",11,null],[12,"alloc","","",11,null],[12,"rows","","",11,null],[12,"fields","","",11,null],[12,"extension","","",11,null],[3,"st_mysql_options_extention","","",null,null],[3,"st_mysql_options","","",null,null],[12,"connect_timeout","","",12,null],[12,"read_timeout","","",12,null],[12,"write_timeout","","",12,null],[12,"port","","",12,null],[12,"protocol","","",12,null],[12,"client_flag","","",12,null],[12,"host","","",12,null],[12,"user","","",12,null],[12,"password","","",12,null],[12,"unix_socket","","",12,null],[12,"db","","",12,null],[12,"init_commands","","",12,null],[12,"my_cnf_file","","",12,null],[12,"my_cnf_group","","",12,null],[12,"charset_dir","","",12,null],[12,"charset_name","","",12,null],[12,"ssl_key","","",12,null],[12,"ssl_cert","","",12,null],[12,"ssl_ca","","",12,null],[12,"ssl_capath","","",12,null],[12,"ssl_cipher","","",12,null],[12,"shared_memory_base_name","","",12,null],[12,"max_allowed_packet","","",12,null],[12,"use_ssl","","",12,null],[12,"compress","","",12,null],[12,"named_pipe","","",12,null],[12,"unused1","","",12,null],[12,"unused2","","",12,null],[12,"unused3","","",12,null],[12,"unused4","","",12,null],[12,"methods_to_use","","",12,null],[12,"ci","","",12,null],[12,"unused5","","",12,null],[12,"report_data_truncation","","",12,null],[12,"local_infile_init","","",12,null],[12,"local_infile_read","","",12,null],[12,"local_infile_end","","",12,null],[12,"local_infile_error","","",12,null],[12,"local_infile_userdata","","",12,null],[12,"extension","","",12,null],[3,"st_mysql_options_st_dynamic_array","","",null,null],[3,"st_mysql_options__bindgen_ty_1","","",null,null],[12,"client_ip","","",13,null],[12,"bind_address","","",13,null],[12,"bindgen_union_field","","",13,null],[3,"character_set","","",null,null],[12,"number","","",14,null],[12,"state","","",14,null],[12,"csname","","",14,null],[12,"name","","",14,null],[12,"comment","","",14,null],[12,"dir","","",14,null],[12,"mbminlen","","",14,null],[12,"mbmaxlen","","",14,null],[3,"st_mysql_methods","","",null,null],[3,"st_mysql_stmt","","",null,null],[12,"mem_root","","",15,null],[12,"list","","",15,null],[12,"mysql","","",15,null],[12,"params","","",15,null],[12,"bind","","",15,null],[12,"fields","","",15,null],[12,"result","","",15,null],[12,"data_cursor","","",15,null],[12,"read_row_func","","",15,null],[12,"affected_rows","","",15,null],[12,"insert_id","","",15,null],[12,"stmt_id","","",15,null],[12,"flags","","",15,null],[12,"prefetch_rows","","",15,null],[12,"server_status","","",15,null],[12,"last_errno","","",15,null],[12,"param_count","","",15,null],[12,"field_count","","",15,null],[12,"state","","",15,null],[12,"last_error","","",15,null],[12,"sqlstate","","",15,null],[12,"send_types_to_server","","",15,null],[12,"bind_param_done","","",15,null],[12,"bind_result_done","","",15,null],[12,"unbuffered_fetch_cancelled","","",15,null],[12,"update_max_length","","",15,null],[12,"extension","","",15,null],[3,"st_mysql_res","","",null,null],[12,"row_count","","",16,null],[12,"fields","","",16,null],[12,"data","","",16,null],[12,"data_cursor","","",16,null],[12,"lengths","","",16,null],[12,"handle","","",16,null],[12,"methods","","",16,null],[12,"row","","",16,null],[12,"current_row","","",16,null],[12,"field_alloc","","",16,null],[12,"field_count","","",16,null],[12,"current_field","","",16,null],[12,"eof","","",16,null],[12,"unbuffered_fetch_cancelled","","",16,null],[12,"extension","","",16,null],[3,"st_mysql_bind","","",null,null],[12,"length","","",17,null],[12,"is_null","","",17,null],[12,"buffer","","",17,null],[12,"error","","",17,null],[12,"row_ptr","","",17,null],[12,"store_param_func","","",17,null],[12,"fetch_result","","",17,null],[12,"skip_result","","",17,null],[12,"buffer_length","","",17,null],[12,"offset","","",17,null],[12,"length_value","","",17,null],[12,"param_number","","",17,null],[12,"pack_length","","",17,null],[12,"buffer_type","","",17,null],[12,"error_value","","",17,null],[12,"is_unsigned","","",17,null],[12,"long_data_used","","",17,null],[12,"is_null_value","","",17,null],[12,"extension","","",17,null],[3,"st_mysql_stmt_extension","","",null,null],[3,"__va_list_tag","","",null,null],[12,"gp_offset","","",18,null],[12,"fp_offset","","",18,null],[12,"overflow_arg_area","","",18,null],[12,"reg_save_area","","",18,null],[4,"enum_field_types","","",null,null],[13,"MYSQL_TYPE_DECIMAL","","",19,null],[13,"MYSQL_TYPE_TINY","","",19,null],[13,"MYSQL_TYPE_SHORT","","",19,null],[13,"MYSQL_TYPE_LONG","","",19,null],[13,"MYSQL_TYPE_FLOAT","","",19,null],[13,"MYSQL_TYPE_DOUBLE","","",19,null],[13,"MYSQL_TYPE_NULL","","",19,null],[13,"MYSQL_TYPE_TIMESTAMP","","",19,null],[13,"MYSQL_TYPE_LONGLONG","","",19,null],[13,"MYSQL_TYPE_INT24","","",19,null],[13,"MYSQL_TYPE_DATE","","",19,null],[13,"MYSQL_TYPE_TIME","","",19,null],[13,"MYSQL_TYPE_DATETIME","","",19,null],[13,"MYSQL_TYPE_YEAR","","",19,null],[13,"MYSQL_TYPE_NEWDATE","","",19,null],[13,"MYSQL_TYPE_VARCHAR","","",19,null],[13,"MYSQL_TYPE_BIT","","",19,null],[13,"MYSQL_TYPE_TIMESTAMP2","","",19,null],[13,"MYSQL_TYPE_DATETIME2","","",19,null],[13,"MYSQL_TYPE_TIME2","","",19,null],[13,"MYSQL_TYPE_JSON","","",19,null],[13,"MYSQL_TYPE_NEWDECIMAL","","",19,null],[13,"MYSQL_TYPE_ENUM","","",19,null],[13,"MYSQL_TYPE_SET","","",19,null],[13,"MYSQL_TYPE_TINY_BLOB","","",19,null],[13,"MYSQL_TYPE_MEDIUM_BLOB","","",19,null],[13,"MYSQL_TYPE_LONG_BLOB","","",19,null],[13,"MYSQL_TYPE_BLOB","","",19,null],[13,"MYSQL_TYPE_VAR_STRING","","",19,null],[13,"MYSQL_TYPE_STRING","","",19,null],[13,"MYSQL_TYPE_GEOMETRY","","",19,null],[4,"mysql_enum_shutdown_level","","",null,null],[13,"SHUTDOWN_DEFAULT","","",20,null],[13,"SHUTDOWN_WAIT_CONNECTIONS","","",20,null],[13,"SHUTDOWN_WAIT_TRANSACTIONS","","",20,null],[13,"SHUTDOWN_WAIT_UPDATES","","",20,null],[13,"SHUTDOWN_WAIT_ALL_BUFFERS","","",20,null],[13,"SHUTDOWN_WAIT_CRITICAL_BUFFERS","","",20,null],[13,"KILL_QUERY","","",20,null],[13,"KILL_CONNECTION","","",20,null],[4,"enum_mysql_set_option","","",null,null],[13,"MYSQL_OPTION_MULTI_STATEMENTS_ON","","",21,null],[13,"MYSQL_OPTION_MULTI_STATEMENTS_OFF","","",21,null],[4,"enum_session_state_type","","",null,null],[13,"SESSION_TRACK_SYSTEM_VARIABLES","","",22,null],[13,"SESSION_TRACK_SCHEMA","","",22,null],[13,"SESSION_TRACK_STATE_CHANGE","","",22,null],[13,"SESSION_TRACK_GTIDS","","",22,null],[13,"SESSION_TRACK_TRANSACTION_CHARACTERISTICS","","",22,null],[13,"SESSION_TRACK_TRANSACTION_STATE","","",22,null],[4,"enum_mysql_timestamp_type","","",null,null],[13,"MYSQL_TIMESTAMP_NONE","","",23,null],[13,"MYSQL_TIMESTAMP_ERROR","","",23,null],[13,"MYSQL_TIMESTAMP_DATE","","",23,null],[13,"MYSQL_TIMESTAMP_DATETIME","","",23,null],[13,"MYSQL_TIMESTAMP_TIME","","",23,null],[4,"st_plugin_vio_info__bindgen_ty_1","","",null,null],[13,"MYSQL_VIO_INVALID","","",24,null],[13,"MYSQL_VIO_TCP","","",24,null],[13,"MYSQL_VIO_SOCKET","","",24,null],[13,"MYSQL_VIO_PIPE","","",24,null],[13,"MYSQL_VIO_MEMORY","","",24,null],[4,"mysql_option","","",null,null],[13,"MYSQL_OPT_CONNECT_TIMEOUT","","",25,null],[13,"MYSQL_OPT_COMPRESS","","",25,null],[13,"MYSQL_OPT_NAMED_PIPE","","",25,null],[13,"MYSQL_INIT_COMMAND","","",25,null],[13,"MYSQL_READ_DEFAULT_FILE","","",25,null],[13,"MYSQL_READ_DEFAULT_GROUP","","",25,null],[13,"MYSQL_SET_CHARSET_DIR","","",25,null],[13,"MYSQL_SET_CHARSET_NAME","","",25,null],[13,"MYSQL_OPT_LOCAL_INFILE","","",25,null],[13,"MYSQL_OPT_PROTOCOL","","",25,null],[13,"MYSQL_SHARED_MEMORY_BASE_NAME","","",25,null],[13,"MYSQL_OPT_READ_TIMEOUT","","",25,null],[13,"MYSQL_OPT_WRITE_TIMEOUT","","",25,null],[13,"MYSQL_OPT_USE_RESULT","","",25,null],[13,"MYSQL_OPT_USE_REMOTE_CONNECTION","","",25,null],[13,"MYSQL_OPT_USE_EMBEDDED_CONNECTION","","",25,null],[13,"MYSQL_OPT_GUESS_CONNECTION","","",25,null],[13,"MYSQL_SET_CLIENT_IP","","",25,null],[13,"MYSQL_SECURE_AUTH","","",25,null],[13,"MYSQL_REPORT_DATA_TRUNCATION","","",25,null],[13,"MYSQL_OPT_RECONNECT","","",25,null],[13,"MYSQL_OPT_SSL_VERIFY_SERVER_CERT","","",25,null],[13,"MYSQL_PLUGIN_DIR","","",25,null],[13,"MYSQL_DEFAULT_AUTH","","",25,null],[13,"MYSQL_OPT_BIND","","",25,null],[13,"MYSQL_OPT_SSL_KEY","","",25,null],[13,"MYSQL_OPT_SSL_CERT","","",25,null],[13,"MYSQL_OPT_SSL_CA","","",25,null],[13,"MYSQL_OPT_SSL_CAPATH","","",25,null],[13,"MYSQL_OPT_SSL_CIPHER","","",25,null],[13,"MYSQL_OPT_SSL_CRL","","",25,null],[13,"MYSQL_OPT_SSL_CRLPATH","","",25,null],[13,"MYSQL_OPT_CONNECT_ATTR_RESET","","",25,null],[13,"MYSQL_OPT_CONNECT_ATTR_ADD","","",25,null],[13,"MYSQL_OPT_CONNECT_ATTR_DELETE","","",25,null],[13,"MYSQL_SERVER_PUBLIC_KEY","","",25,null],[13,"MYSQL_ENABLE_CLEARTEXT_PLUGIN","","",25,null],[13,"MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS","","",25,null],[13,"MYSQL_OPT_SSL_ENFORCE","","",25,null],[13,"MYSQL_OPT_MAX_ALLOWED_PACKET","","",25,null],[13,"MYSQL_OPT_NET_BUFFER_LENGTH","","",25,null],[13,"MYSQL_OPT_TLS_VERSION","","",25,null],[13,"MYSQL_OPT_SSL_MODE","","",25,null],[4,"mysql_status","","",null,null],[13,"MYSQL_STATUS_READY","","",26,null],[13,"MYSQL_STATUS_GET_RESULT","","",26,null],[13,"MYSQL_STATUS_USE_RESULT","","",26,null],[13,"MYSQL_STATUS_STATEMENT_GET_RESULT","","",26,null],[4,"enum_mysql_stmt_state","","",null,null],[13,"MYSQL_STMT_INIT_DONE","","",27,null],[13,"MYSQL_STMT_PREPARE_DONE","","",27,null],[13,"MYSQL_STMT_EXECUTE_DONE","","",27,null],[13,"MYSQL_STMT_FETCH_DONE","","",27,null],[4,"enum_stmt_attr_type","","",null,null],[13,"STMT_ATTR_UPDATE_MAX_LENGTH","","",28,null],[13,"STMT_ATTR_CURSOR_TYPE","","",28,null],[13,"STMT_ATTR_PREFETCH_ROWS","","",28,null],[5,"mysql_errno_to_sqlstate","","",null,null],[5,"mysql_load_plugin","","loads a plugin and initializes it",null,null],[5,"mysql_load_plugin_v","","loads a plugin and initializes it, taking va_list as an argument",null,null],[5,"mysql_client_find_plugin","","finds an already loaded plugin by name, or loads it, if necessary",null,null],[5,"mysql_client_register_plugin","","adds a plugin structure to the list of loaded plugins",null,null],[5,"mysql_plugin_options","","set plugin options",null,null],[5,"mysql_server_init","","",null,null],[5,"mysql_server_end","","",null,null],[5,"mysql_thread_init","","",null,null],[5,"mysql_thread_end","","",null,null],[5,"mysql_num_rows","","",null,null],[5,"mysql_num_fields","","",null,null],[5,"mysql_eof","","",null,null],[5,"mysql_fetch_field_direct","","",null,null],[5,"mysql_fetch_fields","","",null,null],[5,"mysql_row_tell","","",null,null],[5,"mysql_field_tell","","",null,null],[5,"mysql_field_count","","",null,null],[5,"mysql_affected_rows","","",null,null],[5,"mysql_insert_id","","",null,null],[5,"mysql_errno","","",null,null],[5,"mysql_error","","",null,null],[5,"mysql_sqlstate","","",null,null],[5,"mysql_warning_count","","",null,null],[5,"mysql_info","","",null,null],[5,"mysql_thread_id","","",null,null],[5,"mysql_character_set_name","","",null,null],[5,"mysql_set_character_set","","",null,null],[5,"mysql_init","","",null,null],[5,"mysql_ssl_set","","",null,null],[5,"mysql_get_ssl_cipher","","",null,null],[5,"mysql_change_user","","",null,null],[5,"mysql_real_connect","","",null,null],[5,"mysql_select_db","","",null,null],[5,"mysql_query","","",null,null],[5,"mysql_send_query","","",null,null],[5,"mysql_real_query","","",null,null],[5,"mysql_store_result","","",null,null],[5,"mysql_use_result","","",null,null],[5,"mysql_get_character_set_info","","",null,null],[5,"mysql_session_track_get_first","","",null,null],[5,"mysql_session_track_get_next","","",null,null],[5,"mysql_set_local_infile_handler","","",null,null],[5,"mysql_set_local_infile_default","","",null,null],[5,"mysql_shutdown","","",null,null],[5,"mysql_dump_debug_info","","",null,null],[5,"mysql_refresh","","",null,null],[5,"mysql_kill","","",null,null],[5,"mysql_set_server_option","","",null,null],[5,"mysql_ping","","",null,null],[5,"mysql_stat","","",null,null],[5,"mysql_get_server_info","","",null,null],[5,"mysql_get_client_info","","",null,null],[5,"mysql_get_client_version","","",null,null],[5,"mysql_get_host_info","","",null,null],[5,"mysql_get_server_version","","",null,null],[5,"mysql_get_proto_info","","",null,null],[5,"mysql_list_dbs","","",null,null],[5,"mysql_list_tables","","",null,null],[5,"mysql_list_processes","","",null,null],[5,"mysql_options","","",null,null],[5,"mysql_options4","","",null,null],[5,"mysql_get_option","","",null,null],[5,"mysql_free_result","","",null,null],[5,"mysql_data_seek","","",null,null],[5,"mysql_row_seek","","",null,null],[5,"mysql_field_seek","","",null,null],[5,"mysql_fetch_row","","",null,null],[5,"mysql_fetch_lengths","","",null,null],[5,"mysql_fetch_field","","",null,null],[5,"mysql_list_fields","","",null,null],[5,"mysql_escape_string","","",null,null],[5,"mysql_hex_string","","",null,null],[5,"mysql_real_escape_string","","",null,null],[5,"mysql_real_escape_string_quote","","",null,null],[5,"mysql_debug","","",null,null],[5,"mysql_thread_safe","","",null,null],[5,"mysql_embedded","","",null,null],[5,"mysql_read_query_result","","",null,null],[5,"mysql_reset_connection","","",null,null],[5,"mysql_stmt_init","","",null,null],[5,"mysql_stmt_prepare","","",null,null],[5,"mysql_stmt_execute","","",null,null],[5,"mysql_stmt_fetch","","",null,null],[5,"mysql_stmt_fetch_column","","",null,null],[5,"mysql_stmt_store_result","","",null,null],[5,"mysql_stmt_param_count","","",null,null],[5,"mysql_stmt_attr_set","","",null,null],[5,"mysql_stmt_attr_get","","",null,null],[5,"mysql_stmt_bind_param","","",null,null],[5,"mysql_stmt_bind_result","","",null,null],[5,"mysql_stmt_close","","",null,null],[5,"mysql_stmt_reset","","",null,null],[5,"mysql_stmt_free_result","","",null,null],[5,"mysql_stmt_send_long_data","","",null,null],[5,"mysql_stmt_result_metadata","","",null,null],[5,"mysql_stmt_param_metadata","","",null,null],[5,"mysql_stmt_errno","","",null,null],[5,"mysql_stmt_error","","",null,null],[5,"mysql_stmt_sqlstate","","",null,null],[5,"mysql_stmt_row_seek","","",null,null],[5,"mysql_stmt_row_tell","","",null,null],[5,"mysql_stmt_data_seek","","",null,null],[5,"mysql_stmt_num_rows","","",null,null],[5,"mysql_stmt_affected_rows","","",null,null],[5,"mysql_stmt_insert_id","","",null,null],[5,"mysql_stmt_field_count","","",null,null],[5,"mysql_commit","","",null,null],[5,"mysql_rollback","","",null,null],[5,"mysql_autocommit","","",null,null],[5,"mysql_more_results","","",null,null],[5,"mysql_next_result","","",null,null],[5,"mysql_stmt_next_result","","",null,null],[5,"mysql_close","","",null,null],[6,"__darwin_size_t","","",null,null],[6,"my_bool","","",null,null],[6,"my_socket","","",null,null],[6,"Vio","","",null,null],[6,"NET","","",null,null],[6,"MYSQL_TIME","","",null,null],[6,"LIST","","",null,null],[6,"va_list","","",null,null],[6,"MYSQL_PLUGIN_VIO_INFO","","",null,null],[6,"MYSQL_PLUGIN_VIO","","",null,null],[6,"MYSQL_FIELD","","",null,null],[6,"MYSQL_ROW","","",null,null],[6,"MYSQL_FIELD_OFFSET","","",null,null],[6,"my_ulonglong","","",null,null],[6,"PSI_memory_key","","Instrumented memory key.\nTo instrument memory, a memory key must be obtained using @c register_memory.\nUsing a zero key always disable the instrumentation.",null,null],[6,"USED_MEM","","",null,null],[6,"MEM_ROOT","","",null,null],[6,"MYSQL_ROWS","","",null,null],[6,"MYSQL_ROW_OFFSET","","",null,null],[6,"MYSQL_DATA","","",null,null],[6,"MY_CHARSET_INFO","","",null,null],[6,"MYSQL","","",null,null],[6,"MYSQL_RES","","",null,null],[6,"MYSQL_BIND","","",null,null],[6,"MYSQL_STMT","","",null,null],[6,"__builtin_va_list","","",null,null],[17,"MYSQL_SERVER_VERSION","","",null,null],[17,"MYSQL_BASE_VERSION","","",null,null],[17,"MYSQL_SERVER_SUFFIX_DEF","","",null,null],[17,"MYSQL_VERSION_ID","","",null,null],[17,"MYSQL_PORT","","",null,null],[17,"MYSQL_PORT_DEFAULT","","",null,null],[17,"MYSQL_UNIX_ADDR","","",null,null],[17,"MYSQL_CONFIG_NAME","","",null,null],[17,"MYSQL_COMPILATION_COMMENT","","",null,null],[17,"MYSQL_AUTODETECT_CHARSET_NAME","","",null,null],[17,"MYSQL_ERRMSG_SIZE","","",null,null],[17,"MYSQL_STMT_HEADER","","",null,null],[17,"MYSQL_LONG_DATA_HEADER","","",null,null],[17,"MYSQL_CLIENT_reserved1","","",null,null],[17,"MYSQL_CLIENT_reserved2","","",null,null],[17,"MYSQL_CLIENT_AUTHENTICATION_PLUGIN","","",null,null],[17,"MYSQL_CLIENT_TRACE_PLUGIN","","",null,null],[17,"MYSQL_CLIENT_AUTHENTICATION_PLUGIN_INTERFACE_VERSION","","",null,null],[17,"MYSQL_CLIENT_TRACE_PLUGIN_INTERFACE_VERSION","","",null,null],[17,"MYSQL_CLIENT_MAX_PLUGINS","","",null,null],[17,"MYSQL_USERNAME_LENGTH","","",null,null],[17,"MYSQL_NO_DATA","","",null,null],[17,"MYSQL_DATA_TRUNCATED","","",null,null],[17,"st_plugin_vio_info_MYSQL_VIO_INVALID","","",null,null],[17,"st_plugin_vio_info_MYSQL_VIO_TCP","","",null,null],[17,"st_plugin_vio_info_MYSQL_VIO_SOCKET","","",null,null],[17,"st_plugin_vio_info_MYSQL_VIO_PIPE","","",null,null],[17,"st_plugin_vio_info_MYSQL_VIO_MEMORY","","",null,null],[11,"new","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",29,null],[11,"as_mut","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"eq","","",19,null],[11,"hash","","",19,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"hash","","",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"eq","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"eq","","",22,null],[11,"hash","","",22,null],[11,"fmt","","",23,null],[11,"clone","","",23,null],[11,"eq","","",23,null],[11,"hash","","",23,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",5,null],[11,"fmt","","",24,null],[11,"clone","","",24,null],[11,"eq","","",24,null],[11,"hash","","",24,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"hash","","",25,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",12,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"clone","","",12,null],[11,"fmt","","",26,null],[11,"clone","","",26,null],[11,"eq","","",26,null],[11,"hash","","",26,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",35,null],[11,"clone","","",35,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"eq","","",27,null],[11,"hash","","",27,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"fmt","","",36,null],[11,"clone","","",36,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"eq","","",28,null],[11,"hash","","",28,null],[11,"fmt","","",18,null],[11,"clone","","",18,null]],"paths":[[3,"st_net"],[3,"st_mysql_time"],[3,"st_list"],[3,"st_mysql_client_plugin"],[3,"st_mysql"],[3,"st_plugin_vio_info"],[3,"st_plugin_vio"],[3,"st_mysql_field"],[3,"st_used_mem"],[3,"st_mem_root"],[3,"st_mysql_rows"],[3,"st_mysql_data"],[3,"st_mysql_options"],[3,"st_mysql_options__bindgen_ty_1"],[3,"character_set"],[3,"st_mysql_stmt"],[3,"st_mysql_res"],[3,"st_mysql_bind"],[3,"__va_list_tag"],[4,"enum_field_types"],[4,"mysql_enum_shutdown_level"],[4,"enum_mysql_set_option"],[4,"enum_session_state_type"],[4,"enum_mysql_timestamp_type"],[4,"st_plugin_vio_info__bindgen_ty_1"],[4,"mysql_option"],[4,"mysql_status"],[4,"enum_mysql_stmt_state"],[4,"enum_stmt_attr_type"],[3,"__BindgenUnionField"],[3,"st_vio"],[3,"st_mysql_charset_info_st"],[3,"embedded_query_result"],[3,"st_mysql_options_extention"],[3,"st_mysql_options_st_dynamic_array"],[3,"st_mysql_methods"],[3,"st_mysql_stmt_extension"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",6,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",6,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",7,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",8,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",9,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",10,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",11,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",11,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",11,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",11,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",11,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",11,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",11,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",11,null],[10,"swap_bytes","","Reverses the byte order of the integer.",11,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",11,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",11,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",12,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",12,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",12,null],[10,"floor","","Returns the largest integer less than or equal to a number.",12,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",12,null],[10,"trunc","","Return the integer part of a number.",12,null],[10,"fract","","Returns the fractional part of a number.",12,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",12,null],[10,"signum","","Returns a number that represents the sign of `self`.",12,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",12,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",12,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",12,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,null],[10,"powi","","Raise a number to an integer power.",12,null],[10,"powf","","Raise a number to a floating point power.",12,null],[10,"sqrt","","Take the square root of a number.",12,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,null],[10,"exp2","","Returns `2^(self)`.",12,null],[10,"ln","","Returns the natural logarithm of the number.",12,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,null],[10,"log2","","Returns the base 2 logarithm of the number.",12,null],[10,"log10","","Returns the base 10 logarithm of the number.",12,null],[11,"to_degrees","","Converts radians to degrees.",12,null],[11,"to_radians","","Converts degrees to radians.",12,null],[10,"max","","Returns the maximum of the two numbers.",12,null],[10,"min","","Returns the minimum of the two numbers.",12,null],[10,"abs_sub","","The positive difference of two numbers.",12,null],[10,"cbrt","","Take the cubic root of a number.",12,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",12,null],[10,"sin","","Computes the sine of a number (in radians).",12,null],[10,"cos","","Computes the cosine of a number (in radians).",12,null],[10,"tan","","Computes the tangent of a number (in radians).",12,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",12,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",12,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",12,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",12,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",12,null],[10,"sinh","","Hyperbolic sine function.",12,null],[10,"cosh","","Hyperbolic cosine function.",12,null],[10,"tanh","","Hyperbolic tangent function.",12,null],[10,"asinh","","Inverse hyperbolic sine function.",12,null],[10,"acosh","","Inverse hyperbolic cosine function.",12,null],[10,"atanh","","Inverse hyperbolic tangent function.",12,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\nthe type.",10,null],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\nof the type.",11,null],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\nof the type.",12,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[11,"to_degrees","","Converts radians to degrees.",14,null],[11,"to_radians","","Converts degrees to radians.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,null],[10,"swap_bytes","","Reverses the byte order of the integer.",19,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["pq_sys"] = {"doc":"","items":[[3,"__BindgenUnionField","pq_sys","",null,null],[3,"__sbuf","","",null,null],[12,"_base","","",0,null],[12,"_size","","",0,null],[3,"__sFILEX","","",null,null],[3,"__sFILE","","",null,null],[12,"_p","","",1,null],[12,"_r","","",1,null],[12,"_w","","",1,null],[12,"_flags","","",1,null],[12,"_file","","",1,null],[12,"_bf","","",1,null],[12,"_lbfsize","","",1,null],[12,"_cookie","","",1,null],[12,"_close","","",1,null],[12,"_read","","",1,null],[12,"_seek","","",1,null],[12,"_write","","",1,null],[12,"_ub","","",1,null],[12,"_extra","","",1,null],[12,"_ur","","",1,null],[12,"_ubuf","","",1,null],[12,"_nbuf","","",1,null],[12,"_lb","","",1,null],[12,"_blksize","","",1,null],[12,"_offset","","",1,null],[3,"pg_conn","","",null,null],[3,"pg_result","","",null,null],[3,"pg_cancel","","",null,null],[3,"pgNotify","","",null,null],[12,"relname","","",2,null],[12,"be_pid","","",2,null],[12,"extra","","",2,null],[12,"next","","",2,null],[3,"_PQprintOpt","","",null,null],[12,"header","","",3,null],[12,"align","","",3,null],[12,"standard","","",3,null],[12,"html3","","",3,null],[12,"expanded","","",3,null],[12,"pager","","",3,null],[12,"fieldSep","","",3,null],[12,"tableOpt","","",3,null],[12,"caption","","",3,null],[12,"fieldName","","",3,null],[3,"_PQconninfoOption","","",null,null],[12,"keyword","","",4,null],[12,"envvar","","",4,null],[12,"compiled","","",4,null],[12,"val","","",4,null],[12,"label","","",4,null],[12,"dispchar","","",4,null],[12,"dispsize","","",4,null],[3,"_bindgen_ty_8","","",null,null],[12,"len","","",5,null],[12,"isint","","",5,null],[12,"u","","",5,null],[3,"_bindgen_ty_8__bindgen_ty_1","","",null,null],[12,"ptr","","",6,null],[12,"integer","","",6,null],[12,"bindgen_union_field","","",6,null],[3,"pgresAttDesc","","",null,null],[12,"name","","",7,null],[12,"tableid","","",7,null],[12,"columnid","","",7,null],[12,"format","","",7,null],[12,"typid","","",7,null],[12,"typlen","","",7,null],[12,"atttypmod","","",7,null],[4,"_bindgen_ty_2","","",null,null],[13,"CONNECTION_OK","","",8,null],[13,"CONNECTION_BAD","","",8,null],[13,"CONNECTION_STARTED","","",8,null],[13,"CONNECTION_MADE","","",8,null],[13,"CONNECTION_AWAITING_RESPONSE","","",8,null],[13,"CONNECTION_AUTH_OK","","",8,null],[13,"CONNECTION_SETENV","","",8,null],[13,"CONNECTION_SSL_STARTUP","","",8,null],[13,"CONNECTION_NEEDED","","",8,null],[4,"_bindgen_ty_3","","",null,null],[13,"PGRES_POLLING_FAILED","","",9,null],[13,"PGRES_POLLING_READING","","",9,null],[13,"PGRES_POLLING_WRITING","","",9,null],[13,"PGRES_POLLING_OK","","",9,null],[13,"PGRES_POLLING_ACTIVE","","",9,null],[4,"_bindgen_ty_4","","",null,null],[13,"PGRES_EMPTY_QUERY","","",10,null],[13,"PGRES_COMMAND_OK","","",10,null],[13,"PGRES_TUPLES_OK","","",10,null],[13,"PGRES_COPY_OUT","","",10,null],[13,"PGRES_COPY_IN","","",10,null],[13,"PGRES_BAD_RESPONSE","","",10,null],[13,"PGRES_NONFATAL_ERROR","","",10,null],[13,"PGRES_FATAL_ERROR","","",10,null],[13,"PGRES_COPY_BOTH","","",10,null],[13,"PGRES_SINGLE_TUPLE","","",10,null],[4,"_bindgen_ty_5","","",null,null],[13,"PQTRANS_IDLE","","",11,null],[13,"PQTRANS_ACTIVE","","",11,null],[13,"PQTRANS_INTRANS","","",11,null],[13,"PQTRANS_INERROR","","",11,null],[13,"PQTRANS_UNKNOWN","","",11,null],[4,"_bindgen_ty_6","","",null,null],[13,"PQERRORS_TERSE","","",12,null],[13,"PQERRORS_DEFAULT","","",12,null],[13,"PQERRORS_VERBOSE","","",12,null],[4,"_bindgen_ty_7","","",null,null],[13,"PQPING_OK","","",13,null],[13,"PQPING_REJECT","","",13,null],[13,"PQPING_NO_RESPONSE","","",13,null],[13,"PQPING_NO_ATTEMPT","","",13,null],[5,"PQconnectStart","","",null,null],[5,"PQconnectStartParams","","",null,null],[5,"PQconnectPoll","","",null,null],[5,"PQconnectdb","","",null,null],[5,"PQconnectdbParams","","",null,null],[5,"PQsetdbLogin","","",null,null],[5,"PQfinish","","",null,null],[5,"PQconndefaults","","",null,null],[5,"PQconninfoParse","","",null,null],[5,"PQconninfo","","",null,null],[5,"PQconninfoFree","","",null,null],[5,"PQresetStart","","",null,null],[5,"PQresetPoll","","",null,null],[5,"PQreset","","",null,null],[5,"PQgetCancel","","",null,null],[5,"PQfreeCancel","","",null,null],[5,"PQcancel","","",null,null],[5,"PQrequestCancel","","",null,null],[5,"PQdb","","",null,null],[5,"PQuser","","",null,null],[5,"PQpass","","",null,null],[5,"PQhost","","",null,null],[5,"PQport","","",null,null],[5,"PQtty","","",null,null],[5,"PQoptions","","",null,null],[5,"PQstatus","","",null,null],[5,"PQtransactionStatus","","",null,null],[5,"PQparameterStatus","","",null,null],[5,"PQprotocolVersion","","",null,null],[5,"PQserverVersion","","",null,null],[5,"PQerrorMessage","","",null,null],[5,"PQsocket","","",null,null],[5,"PQbackendPID","","",null,null],[5,"PQconnectionNeedsPassword","","",null,null],[5,"PQconnectionUsedPassword","","",null,null],[5,"PQclientEncoding","","",null,null],[5,"PQsetClientEncoding","","",null,null],[5,"PQsslInUse","","",null,null],[5,"PQsslStruct","","",null,null],[5,"PQsslAttribute","","",null,null],[5,"PQsslAttributeNames","","",null,null],[5,"PQgetssl","","",null,null],[5,"PQinitSSL","","",null,null],[5,"PQinitOpenSSL","","",null,null],[5,"PQsetErrorVerbosity","","",null,null],[5,"PQtrace","","",null,null],[5,"PQuntrace","","",null,null],[5,"PQsetNoticeReceiver","","",null,null],[5,"PQsetNoticeProcessor","","",null,null],[5,"PQregisterThreadLock","","",null,null],[5,"PQexec","","",null,null],[5,"PQexecParams","","",null,null],[5,"PQprepare","","",null,null],[5,"PQexecPrepared","","",null,null],[5,"PQsendQuery","","",null,null],[5,"PQsendQueryParams","","",null,null],[5,"PQsendPrepare","","",null,null],[5,"PQsendQueryPrepared","","",null,null],[5,"PQsetSingleRowMode","","",null,null],[5,"PQgetResult","","",null,null],[5,"PQisBusy","","",null,null],[5,"PQconsumeInput","","",null,null],[5,"PQnotifies","","",null,null],[5,"PQputCopyData","","",null,null],[5,"PQputCopyEnd","","",null,null],[5,"PQgetCopyData","","",null,null],[5,"PQgetline","","",null,null],[5,"PQputline","","",null,null],[5,"PQgetlineAsync","","",null,null],[5,"PQputnbytes","","",null,null],[5,"PQendcopy","","",null,null],[5,"PQsetnonblocking","","",null,null],[5,"PQisnonblocking","","",null,null],[5,"PQisthreadsafe","","",null,null],[5,"PQping","","",null,null],[5,"PQpingParams","","",null,null],[5,"PQflush","","",null,null],[5,"PQfn","","",null,null],[5,"PQresultStatus","","",null,null],[5,"PQresStatus","","",null,null],[5,"PQresultErrorMessage","","",null,null],[5,"PQresultErrorField","","",null,null],[5,"PQntuples","","",null,null],[5,"PQnfields","","",null,null],[5,"PQbinaryTuples","","",null,null],[5,"PQfname","","",null,null],[5,"PQfnumber","","",null,null],[5,"PQftable","","",null,null],[5,"PQftablecol","","",null,null],[5,"PQfformat","","",null,null],[5,"PQftype","","",null,null],[5,"PQfsize","","",null,null],[5,"PQfmod","","",null,null],[5,"PQcmdStatus","","",null,null],[5,"PQoidStatus","","",null,null],[5,"PQoidValue","","",null,null],[5,"PQcmdTuples","","",null,null],[5,"PQgetvalue","","",null,null],[5,"PQgetlength","","",null,null],[5,"PQgetisnull","","",null,null],[5,"PQnparams","","",null,null],[5,"PQparamtype","","",null,null],[5,"PQdescribePrepared","","",null,null],[5,"PQdescribePortal","","",null,null],[5,"PQsendDescribePrepared","","",null,null],[5,"PQsendDescribePortal","","",null,null],[5,"PQclear","","",null,null],[5,"PQfreemem","","",null,null],[5,"PQmakeEmptyPGresult","","",null,null],[5,"PQcopyResult","","",null,null],[5,"PQsetResultAttrs","","",null,null],[5,"PQresultAlloc","","",null,null],[5,"PQsetvalue","","",null,null],[5,"PQescapeStringConn","","",null,null],[5,"PQescapeLiteral","","",null,null],[5,"PQescapeIdentifier","","",null,null],[5,"PQescapeByteaConn","","",null,null],[5,"PQunescapeBytea","","",null,null],[5,"PQescapeString","","",null,null],[5,"PQescapeBytea","","",null,null],[5,"PQprint","","",null,null],[5,"PQdisplayTuples","","",null,null],[5,"PQprintTuples","","",null,null],[5,"PQlibVersion","","",null,null],[5,"PQmblen","","",null,null],[5,"PQdsplen","","",null,null],[5,"PQenv2encoding","","",null,null],[5,"PQencryptPassword","","",null,null],[6,"__int64_t","","",null,null],[6,"__darwin_size_t","","",null,null],[6,"__darwin_off_t","","",null,null],[6,"fpos_t","","",null,null],[6,"FILE","","",null,null],[6,"Oid","","",null,null],[6,"PGconn","","",null,null],[6,"PGresult","","",null,null],[6,"PGcancel","","",null,null],[6,"PGnotify","","",null,null],[6,"PQnoticeReceiver","","",null,null],[6,"PQnoticeProcessor","","",null,null],[6,"pqbool","","",null,null],[6,"PQprintOpt","","",null,null],[6,"PQconninfoOption","","",null,null],[6,"PQArgBlock","","",null,null],[6,"PGresAttDesc","","",null,null],[6,"pgthreadlock_t","","",null,null],[17,"CONNECTION_OK","","",null,null],[17,"CONNECTION_BAD","","",null,null],[17,"CONNECTION_STARTED","","",null,null],[17,"CONNECTION_MADE","","",null,null],[17,"CONNECTION_AWAITING_RESPONSE","","",null,null],[17,"CONNECTION_AUTH_OK","","",null,null],[17,"CONNECTION_SETENV","","",null,null],[17,"CONNECTION_SSL_STARTUP","","",null,null],[17,"CONNECTION_NEEDED","","",null,null],[17,"PGRES_POLLING_FAILED","","",null,null],[17,"PGRES_POLLING_READING","","",null,null],[17,"PGRES_POLLING_WRITING","","",null,null],[17,"PGRES_POLLING_OK","","",null,null],[17,"PGRES_POLLING_ACTIVE","","",null,null],[17,"PGRES_EMPTY_QUERY","","",null,null],[17,"PGRES_COMMAND_OK","","",null,null],[17,"PGRES_TUPLES_OK","","",null,null],[17,"PGRES_COPY_OUT","","",null,null],[17,"PGRES_COPY_IN","","",null,null],[17,"PGRES_BAD_RESPONSE","","",null,null],[17,"PGRES_NONFATAL_ERROR","","",null,null],[17,"PGRES_FATAL_ERROR","","",null,null],[17,"PGRES_COPY_BOTH","","",null,null],[17,"PGRES_SINGLE_TUPLE","","",null,null],[17,"PQTRANS_IDLE","","",null,null],[17,"PQTRANS_ACTIVE","","",null,null],[17,"PQTRANS_INTRANS","","",null,null],[17,"PQTRANS_INERROR","","",null,null],[17,"PQTRANS_UNKNOWN","","",null,null],[17,"PQERRORS_TERSE","","",null,null],[17,"PQERRORS_DEFAULT","","",null,null],[17,"PQERRORS_VERBOSE","","",null,null],[17,"PQPING_OK","","",null,null],[17,"PQPING_REJECT","","",null,null],[17,"PQPING_NO_RESPONSE","","",null,null],[17,"PQPING_NO_ATTEMPT","","",null,null],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"hash","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"hash","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"hash","","",11,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"hash","","",13,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"clone","","",5,null],[11,"fmt","","",7,null],[11,"clone","","",7,null]],"paths":[[3,"__sbuf"],[3,"__sFILE"],[3,"pgNotify"],[3,"_PQprintOpt"],[3,"_PQconninfoOption"],[3,"_bindgen_ty_8"],[3,"_bindgen_ty_8__bindgen_ty_1"],[3,"pgresAttDesc"],[4,"_bindgen_ty_2"],[4,"_bindgen_ty_3"],[4,"_bindgen_ty_4"],[4,"_bindgen_ty_5"],[4,"_bindgen_ty_6"],[4,"_bindgen_ty_7"],[3,"__BindgenUnionField"],[3,"__sFILEX"],[3,"pg_conn"],[3,"pg_result"],[3,"pg_cancel"]]};
searchIndex["quickcheck"] = {"doc":"This crate is a port of\n[Haskell&#39;s QuickCheck](http://hackage.haskell.org/package/QuickCheck).","items":[[8,"Rng","quickcheck","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",0,null],[11,"next_u64","","Return the next random u64.",0,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",0,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",0,null],[11,"fill_bytes","","Fill `dest` with random data.",0,null],[11,"gen","","Return a random value of a `Rand` type.",0,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",0,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",0,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",0,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",0,null],[11,"choose","","Return a random element from `values`.",0,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",0,null],[11,"shuffle","","Shuffle a mutable slice in place.",0,null],[3,"StdGen","","StdGen is the default implementation of `Gen`.",null,null],[3,"QuickCheck","","The main QuickCheck type for setting configuration and running QuickCheck.",null,null],[3,"TestResult","","Describes the status of a single instance of a test.",null,null],[5,"empty_shrinker","","Creates a shrinker with zero elements.",null,{"inputs":[],"output":{"name":"box"}}],[5,"single_shrinker","","Creates a shrinker with a single element.",null,{"inputs":[{"name":"a"}],"output":{"name":"box"}}],[5,"quickcheck","","Convenience function for running QuickCheck.",null,{"inputs":[{"name":"a"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"stdgen"}}],[11,"next_u32","","",1,null],[11,"next_u64","","",1,null],[11,"fill_bytes","","",1,null],[11,"size","","",1,null],[11,"new","","Creates a new QuickCheck value.",2,{"inputs":[],"output":{"name":"quickcheck"}}],[11,"tests","","Set the number of tests to run.",2,null],[11,"max_tests","","Set the maximum number of tests to run.",2,null],[11,"gen","","Set the random number generator to be used by QuickCheck.",2,null],[11,"quicktest","","Tests a property and returns the result.",2,null],[11,"quickcheck","","Tests a property and calls `panic!` on failure.",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"passed","","Produces a test result that indicates the current test has passed.",3,{"inputs":[],"output":{"name":"testresult"}}],[11,"failed","","Produces a test result that indicates the current test has failed.",3,{"inputs":[],"output":{"name":"testresult"}}],[11,"error","","Produces a test result that indicates failure from a runtime error.",3,{"inputs":[{"name":"s"}],"output":{"name":"testresult"}}],[11,"discard","","Produces a test result that instructs `quickcheck` to ignore it.\nThis is useful for restricting the domain of your properties.\nWhen a test is discarded, `quickcheck` will replace it with a\nfresh one (up to a certain limit).",3,{"inputs":[],"output":{"name":"testresult"}}],[11,"from_bool","","Converts a `bool` to a `TestResult`. A `true` value indicates that\nthe test has passed and a `false` value indicates that the test\nhas failed.",3,{"inputs":[{"name":"bool"}],"output":{"name":"testresult"}}],[11,"must_fail","","Tests if a &quot;procedure&quot; fails when executed. The test passes only if\n`f` generates a task failure during its execution.",3,{"inputs":[{"name":"f"}],"output":{"name":"testresult"}}],[11,"is_failure","","Returns `true` if and only if this test result describes a failing\ntest.",3,null],[11,"is_error","","Returns `true` if and only if this test result describes a failing\ntest as a result of a run time error.",3,null],[11,"result","","",3,null],[8,"Arbitrary","","`Arbitrary` describes types whose values can be randomly generated and\nshrunk.",null,null],[10,"arbitrary","","",4,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"shrink","","",4,null],[8,"Gen","","`Gen` wraps a `rand::Rng` with parameters to control the distribution of\nrandom values.",null,null],[10,"size","","",5,null],[8,"Testable","","`Testable` describes types (e.g., a function) whose values can be\ntested.",null,null],[10,"result","","",6,null],[14,"quickcheck","","A macro for writing quickcheck tests.",null,null],[11,"shrink","","",4,null]],"paths":[[8,"Rng"],[3,"StdGen"],[3,"QuickCheck"],[3,"TestResult"],[8,"Arbitrary"],[8,"Gen"],[8,"Testable"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,null],[11,"next_u64","","",24,null],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,null],[11,"next_u64","","Return the next random u64.",27,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",27,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,null],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,null],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,null],[11,"next","","",30,null],[11,"clone","","",31,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,null],[11,"next_u64","","",32,null],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,null],[11,"next_u32","","",33,null],[11,"next_u64","","",33,null],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"next_back","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"next_back","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",6,null],[11,"cmp","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed\nfrom the suffix of each literal.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",7,null],[11,"into_iter","","",7,null],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,null],[11,"remove","","Removes the given character from the class if it exists.",7,null],[11,"negate","","Negates the character class.",7,null],[11,"case_fold","","Apply case folding to this character class.",7,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,null],[11,"remove","","Removes the given byte from the class if it exists.",8,null],[11,"negate","","Negates the byte class.",8,null],[11,"case_fold","","Apply case folding to this byte class.",8,null],[11,"deref","","",8,null],[11,"into_iter","","",8,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",7,null],[11,"fmt","","",0,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,null],[11,"kind","","Returns the type of the regex parse error.",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["serde"] = {"doc":"# Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&amp;[u8]` and `Vec&lt;u8&gt;`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec&lt;u8&gt;` in order to serialize and deserialize in an efficient\nway.",null,null],[3,"Bytes","","Wraps a `&amp;[u8]` in order to serialize in an efficient way. Does not support\ndeserialization.",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"new","","Wrap an existing `&amp;[u8]`.",1,null],[11,"fmt","","",1,null],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,null],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor`\ntrait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\nwas not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\nwas not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not\nexpected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&amp;str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&amp;[u8]` or `Vec&lt;u8&gt;` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option&lt;T&gt;` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was\nnot expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"deserialize_bool","","",5,null],[11,"deserialize_u8","","",5,null],[11,"deserialize_u16","","",5,null],[11,"deserialize_u32","","",5,null],[11,"deserialize_u64","","",5,null],[11,"deserialize_i8","","",5,null],[11,"deserialize_i16","","",5,null],[11,"deserialize_i32","","",5,null],[11,"deserialize_i64","","",5,null],[11,"deserialize_f32","","",5,null],[11,"deserialize_f64","","",5,null],[11,"deserialize_char","","",5,null],[11,"deserialize_str","","",5,null],[11,"deserialize_string","","",5,null],[11,"deserialize_unit","","",5,null],[11,"deserialize_seq","","",5,null],[11,"deserialize_seq_fixed_size","","",5,null],[11,"deserialize_bytes","","",5,null],[11,"deserialize_map","","",5,null],[11,"deserialize_unit_struct","","",5,null],[11,"deserialize_newtype_struct","","",5,null],[11,"deserialize_tuple_struct","","",5,null],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,null],[11,"deserialize_tuple","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,null],[11,"deserialize_byte_buf","","",5,null],[11,"deserialize","","",5,null],[11,"deserialize_option","","",5,null],[11,"deserialize_bool","","",6,null],[11,"deserialize_u8","","",6,null],[11,"deserialize_u16","","",6,null],[11,"deserialize_u32","","",6,null],[11,"deserialize_u64","","",6,null],[11,"deserialize_i8","","",6,null],[11,"deserialize_i16","","",6,null],[11,"deserialize_i32","","",6,null],[11,"deserialize_i64","","",6,null],[11,"deserialize_f32","","",6,null],[11,"deserialize_f64","","",6,null],[11,"deserialize_char","","",6,null],[11,"deserialize_str","","",6,null],[11,"deserialize_string","","",6,null],[11,"deserialize_unit","","",6,null],[11,"deserialize_option","","",6,null],[11,"deserialize_seq","","",6,null],[11,"deserialize_seq_fixed_size","","",6,null],[11,"deserialize_bytes","","",6,null],[11,"deserialize_map","","",6,null],[11,"deserialize_unit_struct","","",6,null],[11,"deserialize_newtype_struct","","",6,null],[11,"deserialize_tuple_struct","","",6,null],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,null],[11,"deserialize_tuple","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,null],[11,"deserialize_byte_buf","","",6,null],[11,"deserialize","","",6,null],[11,"deserialize_bool","","",7,null],[11,"deserialize_u8","","",7,null],[11,"deserialize_u16","","",7,null],[11,"deserialize_u32","","",7,null],[11,"deserialize_u64","","",7,null],[11,"deserialize_i8","","",7,null],[11,"deserialize_i16","","",7,null],[11,"deserialize_i32","","",7,null],[11,"deserialize_i64","","",7,null],[11,"deserialize_f32","","",7,null],[11,"deserialize_f64","","",7,null],[11,"deserialize_char","","",7,null],[11,"deserialize_str","","",7,null],[11,"deserialize_string","","",7,null],[11,"deserialize_unit","","",7,null],[11,"deserialize_option","","",7,null],[11,"deserialize_seq","","",7,null],[11,"deserialize_seq_fixed_size","","",7,null],[11,"deserialize_bytes","","",7,null],[11,"deserialize_map","","",7,null],[11,"deserialize_unit_struct","","",7,null],[11,"deserialize_newtype_struct","","",7,null],[11,"deserialize_tuple_struct","","",7,null],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,null],[11,"deserialize_tuple","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,null],[11,"deserialize_byte_buf","","",7,null],[11,"deserialize","","",7,null],[11,"deserialize_bool","","",8,null],[11,"deserialize_u8","","",8,null],[11,"deserialize_u16","","",8,null],[11,"deserialize_u32","","",8,null],[11,"deserialize_u64","","",8,null],[11,"deserialize_i8","","",8,null],[11,"deserialize_i16","","",8,null],[11,"deserialize_i32","","",8,null],[11,"deserialize_i64","","",8,null],[11,"deserialize_f32","","",8,null],[11,"deserialize_f64","","",8,null],[11,"deserialize_char","","",8,null],[11,"deserialize_str","","",8,null],[11,"deserialize_string","","",8,null],[11,"deserialize_unit","","",8,null],[11,"deserialize_option","","",8,null],[11,"deserialize_seq","","",8,null],[11,"deserialize_seq_fixed_size","","",8,null],[11,"deserialize_bytes","","",8,null],[11,"deserialize_map","","",8,null],[11,"deserialize_unit_struct","","",8,null],[11,"deserialize_newtype_struct","","",8,null],[11,"deserialize_tuple_struct","","",8,null],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,null],[11,"deserialize_tuple","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,null],[11,"deserialize_byte_buf","","",8,null],[11,"deserialize","","",8,null],[11,"deserialize_bool","","",9,null],[11,"deserialize_u8","","",9,null],[11,"deserialize_u16","","",9,null],[11,"deserialize_u32","","",9,null],[11,"deserialize_u64","","",9,null],[11,"deserialize_i8","","",9,null],[11,"deserialize_i16","","",9,null],[11,"deserialize_i32","","",9,null],[11,"deserialize_i64","","",9,null],[11,"deserialize_f32","","",9,null],[11,"deserialize_f64","","",9,null],[11,"deserialize_char","","",9,null],[11,"deserialize_str","","",9,null],[11,"deserialize_string","","",9,null],[11,"deserialize_unit","","",9,null],[11,"deserialize_option","","",9,null],[11,"deserialize_seq","","",9,null],[11,"deserialize_seq_fixed_size","","",9,null],[11,"deserialize_bytes","","",9,null],[11,"deserialize_map","","",9,null],[11,"deserialize_unit_struct","","",9,null],[11,"deserialize_newtype_struct","","",9,null],[11,"deserialize_tuple_struct","","",9,null],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,null],[11,"deserialize_tuple","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,null],[11,"deserialize_byte_buf","","",9,null],[11,"deserialize","","",9,null],[11,"deserialize_bool","","",10,null],[11,"deserialize_u8","","",10,null],[11,"deserialize_u16","","",10,null],[11,"deserialize_u32","","",10,null],[11,"deserialize_u64","","",10,null],[11,"deserialize_i8","","",10,null],[11,"deserialize_i16","","",10,null],[11,"deserialize_i32","","",10,null],[11,"deserialize_i64","","",10,null],[11,"deserialize_f32","","",10,null],[11,"deserialize_f64","","",10,null],[11,"deserialize_char","","",10,null],[11,"deserialize_str","","",10,null],[11,"deserialize_string","","",10,null],[11,"deserialize_unit","","",10,null],[11,"deserialize_option","","",10,null],[11,"deserialize_seq","","",10,null],[11,"deserialize_seq_fixed_size","","",10,null],[11,"deserialize_bytes","","",10,null],[11,"deserialize_map","","",10,null],[11,"deserialize_unit_struct","","",10,null],[11,"deserialize_newtype_struct","","",10,null],[11,"deserialize_tuple_struct","","",10,null],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,null],[11,"deserialize_tuple","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,null],[11,"deserialize_byte_buf","","",10,null],[11,"deserialize","","",10,null],[11,"deserialize_bool","","",11,null],[11,"deserialize_u8","","",11,null],[11,"deserialize_u16","","",11,null],[11,"deserialize_u32","","",11,null],[11,"deserialize_u64","","",11,null],[11,"deserialize_i8","","",11,null],[11,"deserialize_i16","","",11,null],[11,"deserialize_i32","","",11,null],[11,"deserialize_i64","","",11,null],[11,"deserialize_f32","","",11,null],[11,"deserialize_f64","","",11,null],[11,"deserialize_char","","",11,null],[11,"deserialize_str","","",11,null],[11,"deserialize_string","","",11,null],[11,"deserialize_unit","","",11,null],[11,"deserialize_option","","",11,null],[11,"deserialize_seq","","",11,null],[11,"deserialize_seq_fixed_size","","",11,null],[11,"deserialize_bytes","","",11,null],[11,"deserialize_map","","",11,null],[11,"deserialize_unit_struct","","",11,null],[11,"deserialize_newtype_struct","","",11,null],[11,"deserialize_tuple_struct","","",11,null],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,null],[11,"deserialize_tuple","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,null],[11,"deserialize_byte_buf","","",11,null],[11,"deserialize","","",11,null],[11,"deserialize_bool","","",12,null],[11,"deserialize_u8","","",12,null],[11,"deserialize_u16","","",12,null],[11,"deserialize_u32","","",12,null],[11,"deserialize_u64","","",12,null],[11,"deserialize_i8","","",12,null],[11,"deserialize_i16","","",12,null],[11,"deserialize_i32","","",12,null],[11,"deserialize_i64","","",12,null],[11,"deserialize_f32","","",12,null],[11,"deserialize_f64","","",12,null],[11,"deserialize_char","","",12,null],[11,"deserialize_str","","",12,null],[11,"deserialize_string","","",12,null],[11,"deserialize_unit","","",12,null],[11,"deserialize_option","","",12,null],[11,"deserialize_seq","","",12,null],[11,"deserialize_seq_fixed_size","","",12,null],[11,"deserialize_bytes","","",12,null],[11,"deserialize_map","","",12,null],[11,"deserialize_unit_struct","","",12,null],[11,"deserialize_newtype_struct","","",12,null],[11,"deserialize_tuple_struct","","",12,null],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,null],[11,"deserialize_tuple","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,null],[11,"deserialize_byte_buf","","",12,null],[11,"deserialize","","",12,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,null],[11,"deserialize_byte_buf","","",13,null],[11,"deserialize","","",13,null],[11,"deserialize_bool","","",14,null],[11,"deserialize_u8","","",14,null],[11,"deserialize_u16","","",14,null],[11,"deserialize_u32","","",14,null],[11,"deserialize_u64","","",14,null],[11,"deserialize_i8","","",14,null],[11,"deserialize_i16","","",14,null],[11,"deserialize_i32","","",14,null],[11,"deserialize_i64","","",14,null],[11,"deserialize_f32","","",14,null],[11,"deserialize_f64","","",14,null],[11,"deserialize_char","","",14,null],[11,"deserialize_str","","",14,null],[11,"deserialize_string","","",14,null],[11,"deserialize_unit","","",14,null],[11,"deserialize_option","","",14,null],[11,"deserialize_seq","","",14,null],[11,"deserialize_seq_fixed_size","","",14,null],[11,"deserialize_bytes","","",14,null],[11,"deserialize_map","","",14,null],[11,"deserialize_unit_struct","","",14,null],[11,"deserialize_newtype_struct","","",14,null],[11,"deserialize_tuple_struct","","",14,null],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,null],[11,"deserialize_tuple","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,null],[11,"deserialize_byte_buf","","",14,null],[11,"deserialize","","",14,null],[11,"deserialize_bool","","",15,null],[11,"deserialize_u8","","",15,null],[11,"deserialize_u16","","",15,null],[11,"deserialize_u32","","",15,null],[11,"deserialize_u64","","",15,null],[11,"deserialize_i8","","",15,null],[11,"deserialize_i16","","",15,null],[11,"deserialize_i32","","",15,null],[11,"deserialize_i64","","",15,null],[11,"deserialize_f32","","",15,null],[11,"deserialize_f64","","",15,null],[11,"deserialize_char","","",15,null],[11,"deserialize_str","","",15,null],[11,"deserialize_string","","",15,null],[11,"deserialize_unit","","",15,null],[11,"deserialize_option","","",15,null],[11,"deserialize_seq","","",15,null],[11,"deserialize_seq_fixed_size","","",15,null],[11,"deserialize_bytes","","",15,null],[11,"deserialize_map","","",15,null],[11,"deserialize_unit_struct","","",15,null],[11,"deserialize_newtype_struct","","",15,null],[11,"deserialize_tuple_struct","","",15,null],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,null],[11,"deserialize_tuple","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,null],[11,"deserialize_byte_buf","","",15,null],[11,"deserialize","","",15,null],[11,"deserialize_bool","","",16,null],[11,"deserialize_u8","","",16,null],[11,"deserialize_u16","","",16,null],[11,"deserialize_u32","","",16,null],[11,"deserialize_u64","","",16,null],[11,"deserialize_i8","","",16,null],[11,"deserialize_i16","","",16,null],[11,"deserialize_i32","","",16,null],[11,"deserialize_i64","","",16,null],[11,"deserialize_f32","","",16,null],[11,"deserialize_f64","","",16,null],[11,"deserialize_char","","",16,null],[11,"deserialize_str","","",16,null],[11,"deserialize_string","","",16,null],[11,"deserialize_unit","","",16,null],[11,"deserialize_option","","",16,null],[11,"deserialize_seq","","",16,null],[11,"deserialize_seq_fixed_size","","",16,null],[11,"deserialize_bytes","","",16,null],[11,"deserialize_map","","",16,null],[11,"deserialize_unit_struct","","",16,null],[11,"deserialize_newtype_struct","","",16,null],[11,"deserialize_tuple_struct","","",16,null],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,null],[11,"deserialize_tuple","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,null],[11,"deserialize_byte_buf","","",16,null],[11,"deserialize","","",16,null],[11,"deserialize_bool","","",17,null],[11,"deserialize_u8","","",17,null],[11,"deserialize_u16","","",17,null],[11,"deserialize_u32","","",17,null],[11,"deserialize_u64","","",17,null],[11,"deserialize_i8","","",17,null],[11,"deserialize_i16","","",17,null],[11,"deserialize_i32","","",17,null],[11,"deserialize_i64","","",17,null],[11,"deserialize_f32","","",17,null],[11,"deserialize_f64","","",17,null],[11,"deserialize_char","","",17,null],[11,"deserialize_str","","",17,null],[11,"deserialize_string","","",17,null],[11,"deserialize_unit","","",17,null],[11,"deserialize_option","","",17,null],[11,"deserialize_seq","","",17,null],[11,"deserialize_seq_fixed_size","","",17,null],[11,"deserialize_bytes","","",17,null],[11,"deserialize_map","","",17,null],[11,"deserialize_unit_struct","","",17,null],[11,"deserialize_newtype_struct","","",17,null],[11,"deserialize_tuple_struct","","",17,null],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,null],[11,"deserialize_tuple","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,null],[11,"deserialize_byte_buf","","",17,null],[11,"deserialize","","",17,null],[11,"deserialize_bool","","",18,null],[11,"deserialize_u8","","",18,null],[11,"deserialize_u16","","",18,null],[11,"deserialize_u32","","",18,null],[11,"deserialize_u64","","",18,null],[11,"deserialize_i8","","",18,null],[11,"deserialize_i16","","",18,null],[11,"deserialize_i32","","",18,null],[11,"deserialize_i64","","",18,null],[11,"deserialize_f32","","",18,null],[11,"deserialize_f64","","",18,null],[11,"deserialize_char","","",18,null],[11,"deserialize_str","","",18,null],[11,"deserialize_string","","",18,null],[11,"deserialize_unit","","",18,null],[11,"deserialize_option","","",18,null],[11,"deserialize_seq","","",18,null],[11,"deserialize_seq_fixed_size","","",18,null],[11,"deserialize_bytes","","",18,null],[11,"deserialize_map","","",18,null],[11,"deserialize_unit_struct","","",18,null],[11,"deserialize_newtype_struct","","",18,null],[11,"deserialize_tuple_struct","","",18,null],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,null],[11,"deserialize_tuple","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,null],[11,"deserialize_byte_buf","","",18,null],[11,"deserialize","","",18,null],[11,"deserialize_bool","","",19,null],[11,"deserialize_u8","","",19,null],[11,"deserialize_u16","","",19,null],[11,"deserialize_u32","","",19,null],[11,"deserialize_u64","","",19,null],[11,"deserialize_i8","","",19,null],[11,"deserialize_i16","","",19,null],[11,"deserialize_i32","","",19,null],[11,"deserialize_i64","","",19,null],[11,"deserialize_f32","","",19,null],[11,"deserialize_f64","","",19,null],[11,"deserialize_char","","",19,null],[11,"deserialize_str","","",19,null],[11,"deserialize_string","","",19,null],[11,"deserialize_unit","","",19,null],[11,"deserialize_option","","",19,null],[11,"deserialize_seq","","",19,null],[11,"deserialize_seq_fixed_size","","",19,null],[11,"deserialize_bytes","","",19,null],[11,"deserialize_map","","",19,null],[11,"deserialize_unit_struct","","",19,null],[11,"deserialize_newtype_struct","","",19,null],[11,"deserialize_tuple_struct","","",19,null],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,null],[11,"deserialize_tuple","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_ignored_any","","",19,null],[11,"deserialize_byte_buf","","",19,null],[11,"deserialize","","",19,null],[11,"deserialize","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,null],[11,"deserialize_u8","","",20,null],[11,"deserialize_u16","","",20,null],[11,"deserialize_u32","","",20,null],[11,"deserialize_u64","","",20,null],[11,"deserialize_i8","","",20,null],[11,"deserialize_i16","","",20,null],[11,"deserialize_i32","","",20,null],[11,"deserialize_i64","","",20,null],[11,"deserialize_f32","","",20,null],[11,"deserialize_f64","","",20,null],[11,"deserialize_char","","",20,null],[11,"deserialize_str","","",20,null],[11,"deserialize_string","","",20,null],[11,"deserialize_unit","","",20,null],[11,"deserialize_option","","",20,null],[11,"deserialize_seq","","",20,null],[11,"deserialize_seq_fixed_size","","",20,null],[11,"deserialize_bytes","","",20,null],[11,"deserialize_map","","",20,null],[11,"deserialize_unit_struct","","",20,null],[11,"deserialize_newtype_struct","","",20,null],[11,"deserialize_tuple_struct","","",20,null],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,null],[11,"deserialize_tuple","","",20,null],[11,"deserialize_ignored_any","","",20,null],[11,"deserialize_byte_buf","","",20,null],[11,"visit_variant_seed","","",20,null],[11,"deserialize","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,null],[11,"deserialize_u8","","",21,null],[11,"deserialize_u16","","",21,null],[11,"deserialize_u32","","",21,null],[11,"deserialize_u64","","",21,null],[11,"deserialize_i8","","",21,null],[11,"deserialize_i16","","",21,null],[11,"deserialize_i32","","",21,null],[11,"deserialize_i64","","",21,null],[11,"deserialize_f32","","",21,null],[11,"deserialize_f64","","",21,null],[11,"deserialize_char","","",21,null],[11,"deserialize_str","","",21,null],[11,"deserialize_string","","",21,null],[11,"deserialize_unit","","",21,null],[11,"deserialize_option","","",21,null],[11,"deserialize_seq","","",21,null],[11,"deserialize_seq_fixed_size","","",21,null],[11,"deserialize_bytes","","",21,null],[11,"deserialize_map","","",21,null],[11,"deserialize_unit_struct","","",21,null],[11,"deserialize_newtype_struct","","",21,null],[11,"deserialize_tuple_struct","","",21,null],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,null],[11,"deserialize_tuple","","",21,null],[11,"deserialize_ignored_any","","",21,null],[11,"deserialize_byte_buf","","",21,null],[11,"visit_variant_seed","","",21,null],[11,"deserialize","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,null],[11,"deserialize_u8","","",22,null],[11,"deserialize_u16","","",22,null],[11,"deserialize_u32","","",22,null],[11,"deserialize_u64","","",22,null],[11,"deserialize_i8","","",22,null],[11,"deserialize_i16","","",22,null],[11,"deserialize_i32","","",22,null],[11,"deserialize_i64","","",22,null],[11,"deserialize_f32","","",22,null],[11,"deserialize_f64","","",22,null],[11,"deserialize_char","","",22,null],[11,"deserialize_str","","",22,null],[11,"deserialize_string","","",22,null],[11,"deserialize_unit","","",22,null],[11,"deserialize_option","","",22,null],[11,"deserialize_seq","","",22,null],[11,"deserialize_seq_fixed_size","","",22,null],[11,"deserialize_bytes","","",22,null],[11,"deserialize_map","","",22,null],[11,"deserialize_unit_struct","","",22,null],[11,"deserialize_newtype_struct","","",22,null],[11,"deserialize_tuple_struct","","",22,null],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,null],[11,"deserialize_tuple","","",22,null],[11,"deserialize_ignored_any","","",22,null],[11,"deserialize_byte_buf","","",22,null],[11,"visit_variant_seed","","",22,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to\n`Visitor::visit_seq`.",23,null],[11,"deserialize","","",23,null],[11,"deserialize_bool","","",23,null],[11,"deserialize_u8","","",23,null],[11,"deserialize_u16","","",23,null],[11,"deserialize_u32","","",23,null],[11,"deserialize_u64","","",23,null],[11,"deserialize_i8","","",23,null],[11,"deserialize_i16","","",23,null],[11,"deserialize_i32","","",23,null],[11,"deserialize_i64","","",23,null],[11,"deserialize_f32","","",23,null],[11,"deserialize_f64","","",23,null],[11,"deserialize_char","","",23,null],[11,"deserialize_str","","",23,null],[11,"deserialize_string","","",23,null],[11,"deserialize_unit","","",23,null],[11,"deserialize_option","","",23,null],[11,"deserialize_seq","","",23,null],[11,"deserialize_seq_fixed_size","","",23,null],[11,"deserialize_bytes","","",23,null],[11,"deserialize_map","","",23,null],[11,"deserialize_unit_struct","","",23,null],[11,"deserialize_newtype_struct","","",23,null],[11,"deserialize_tuple_struct","","",23,null],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,null],[11,"deserialize_tuple","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,null],[11,"deserialize_byte_buf","","",23,null],[11,"visit_seed","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,null],[11,"deserialize_bool","","",24,null],[11,"deserialize_u8","","",24,null],[11,"deserialize_u16","","",24,null],[11,"deserialize_u32","","",24,null],[11,"deserialize_u64","","",24,null],[11,"deserialize_i8","","",24,null],[11,"deserialize_i16","","",24,null],[11,"deserialize_i32","","",24,null],[11,"deserialize_i64","","",24,null],[11,"deserialize_f32","","",24,null],[11,"deserialize_f64","","",24,null],[11,"deserialize_char","","",24,null],[11,"deserialize_str","","",24,null],[11,"deserialize_string","","",24,null],[11,"deserialize_unit","","",24,null],[11,"deserialize_option","","",24,null],[11,"deserialize_seq","","",24,null],[11,"deserialize_seq_fixed_size","","",24,null],[11,"deserialize_bytes","","",24,null],[11,"deserialize_map","","",24,null],[11,"deserialize_unit_struct","","",24,null],[11,"deserialize_newtype_struct","","",24,null],[11,"deserialize_tuple_struct","","",24,null],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,null],[11,"deserialize_tuple","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,null],[11,"deserialize_byte_buf","","",24,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to\n`Visitor::visit_map`.",25,null],[11,"deserialize","","",25,null],[11,"deserialize_seq","","",25,null],[11,"deserialize_seq_fixed_size","","",25,null],[11,"deserialize_bool","","",25,null],[11,"deserialize_u8","","",25,null],[11,"deserialize_u16","","",25,null],[11,"deserialize_u32","","",25,null],[11,"deserialize_u64","","",25,null],[11,"deserialize_i8","","",25,null],[11,"deserialize_i16","","",25,null],[11,"deserialize_i32","","",25,null],[11,"deserialize_i64","","",25,null],[11,"deserialize_f32","","",25,null],[11,"deserialize_f64","","",25,null],[11,"deserialize_char","","",25,null],[11,"deserialize_str","","",25,null],[11,"deserialize_string","","",25,null],[11,"deserialize_unit","","",25,null],[11,"deserialize_option","","",25,null],[11,"deserialize_bytes","","",25,null],[11,"deserialize_map","","",25,null],[11,"deserialize_unit_struct","","",25,null],[11,"deserialize_newtype_struct","","",25,null],[11,"deserialize_tuple_struct","","",25,null],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,null],[11,"deserialize_tuple","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,null],[11,"deserialize_byte_buf","","",25,null],[11,"visit_key_seed","","",25,null],[11,"visit_value_seed","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,null],[11,"deserialize_bool","","",26,null],[11,"deserialize_u8","","",26,null],[11,"deserialize_u16","","",26,null],[11,"deserialize_u32","","",26,null],[11,"deserialize_u64","","",26,null],[11,"deserialize_i8","","",26,null],[11,"deserialize_i16","","",26,null],[11,"deserialize_i32","","",26,null],[11,"deserialize_i64","","",26,null],[11,"deserialize_f32","","",26,null],[11,"deserialize_f64","","",26,null],[11,"deserialize_char","","",26,null],[11,"deserialize_str","","",26,null],[11,"deserialize_string","","",26,null],[11,"deserialize_unit","","",26,null],[11,"deserialize_option","","",26,null],[11,"deserialize_seq","","",26,null],[11,"deserialize_seq_fixed_size","","",26,null],[11,"deserialize_bytes","","",26,null],[11,"deserialize_map","","",26,null],[11,"deserialize_unit_struct","","",26,null],[11,"deserialize_newtype_struct","","",26,null],[11,"deserialize_tuple_struct","","",26,null],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,null],[11,"deserialize_tuple","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,null],[11,"deserialize_byte_buf","","",26,null],[11,"into_deserializer","serde::bytes","",1,null],[11,"deserialize","serde::de::value","",27,null],[11,"deserialize_bool","","",27,null],[11,"deserialize_u8","","",27,null],[11,"deserialize_u16","","",27,null],[11,"deserialize_u32","","",27,null],[11,"deserialize_u64","","",27,null],[11,"deserialize_i8","","",27,null],[11,"deserialize_i16","","",27,null],[11,"deserialize_i32","","",27,null],[11,"deserialize_i64","","",27,null],[11,"deserialize_f32","","",27,null],[11,"deserialize_f64","","",27,null],[11,"deserialize_char","","",27,null],[11,"deserialize_str","","",27,null],[11,"deserialize_string","","",27,null],[11,"deserialize_unit","","",27,null],[11,"deserialize_option","","",27,null],[11,"deserialize_seq","","",27,null],[11,"deserialize_seq_fixed_size","","",27,null],[11,"deserialize_bytes","","",27,null],[11,"deserialize_map","","",27,null],[11,"deserialize_unit_struct","","",27,null],[11,"deserialize_newtype_struct","","",27,null],[11,"deserialize_tuple_struct","","",27,null],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,null],[11,"deserialize_tuple","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,null],[11,"deserialize_byte_buf","","",27,null],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,null],[11,"deserialize_bool","","",28,null],[11,"deserialize_u8","","",28,null],[11,"deserialize_u16","","",28,null],[11,"deserialize_u32","","",28,null],[11,"deserialize_u64","","",28,null],[11,"deserialize_i8","","",28,null],[11,"deserialize_i16","","",28,null],[11,"deserialize_i32","","",28,null],[11,"deserialize_i64","","",28,null],[11,"deserialize_f32","","",28,null],[11,"deserialize_f64","","",28,null],[11,"deserialize_char","","",28,null],[11,"deserialize_str","","",28,null],[11,"deserialize_string","","",28,null],[11,"deserialize_unit","","",28,null],[11,"deserialize_option","","",28,null],[11,"deserialize_seq","","",28,null],[11,"deserialize_seq_fixed_size","","",28,null],[11,"deserialize_bytes","","",28,null],[11,"deserialize_map","","",28,null],[11,"deserialize_unit_struct","","",28,null],[11,"deserialize_newtype_struct","","",28,null],[11,"deserialize_tuple_struct","","",28,null],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,null],[11,"deserialize_tuple","","",28,null],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,null],[11,"deserialize_byte_buf","","",28,null],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive\nerror messages belonging to the `Deserializer` against which they are\ncurrently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was\nexpecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that\nis wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains\ntoo many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an\nunrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an\nunrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required\nfield with a particular name but that field was not present in the\ninput.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting\nto receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as\nthe `Display` and `Debug` traits.",30,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you\never find yourself looking for a way to pass data into a `Deserialize` impl,\nthis trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except\nwith some initial piece of data (the seed) passed in.",32,null],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",33,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",33,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",33,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,null],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",33,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a\nparticular number of elements.",33,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",33,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct\nfield.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",33,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,null],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,null],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,null],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,null],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,null],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,null],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,null],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,null],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,null],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,null],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,null],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,null],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,null],[11,"visit_str","","Deserialize a `&amp;str` into a `Value`.",34,null],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,null],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,null],[11,"visit_none","","Deserialize an absent optional `Value`.",34,null],[11,"visit_some","","Deserialize a present optional `Value`.",34,null],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,null],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,null],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,null],[11,"visit_enum","","Deserialize `Value` as an enum.",34,null],[11,"visit_bytes","","Deserialize a `&amp;[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec&lt;u8&gt;` into a `Value`.",34,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed\nto the `Deserialize` in order to identify which variant of an enum to\ndeserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum\nvariant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,null],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and\npassed to the `Deserialize` to deserialize the content of a particular enum\nvariant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,null],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,null],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,null],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,null],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",30,null],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support\nserializing one of the compound types.",null,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_key","","",39,null],[11,"serialize_value","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors\nbelonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error\nwhile serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an `io::Write` or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for\nserializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the\ntuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content\nof the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content\nof the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the\nmap.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the\nstruct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the\ncontent of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,null],[10,"serialize_i8","","Serialize an `i8` value.",42,null],[10,"serialize_i16","","Serialize an `i16` value.",42,null],[10,"serialize_i32","","Serialize an `i32` value.",42,null],[10,"serialize_i64","","Serialize an `i64` value.",42,null],[10,"serialize_u8","","Serialize a `u8` value.",42,null],[10,"serialize_u16","","Serialize a `u16` value.",42,null],[10,"serialize_u32","","Serialize a `u32` value.",42,null],[10,"serialize_u64","","Serialize a `u64` value.",42,null],[10,"serialize_f32","","Serialize an `f32` value.",42,null],[10,"serialize_f64","","Serialize an `f64` value.",42,null],[10,"serialize_char","","Serialize a character.",42,null],[10,"serialize_str","","Serialize a `&amp;str`.",42,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,null],[10,"serialize_some","","Serialize a `Some(T)` value.",42,null],[10,"serialize_unit","","Serialize a `()` value.",42,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",42,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,null],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",42,null],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",42,null],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_element`, then a call to `end`.",42,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",42,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",42,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",42,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[11,"collect_seq","","Collect an iterator as a sequence.",42,null],[11,"collect_map","","Collect an iterator as a map.",42,null],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and\n`Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,null],[10,"end","","Finish serializing a sequence.",43,null],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,null],[10,"end","","Finish serializing a tuple.",44,null],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,null],[10,"end","","Finish serializing a tuple struct.",45,null],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,null],[10,"end","","Finish serializing a tuple variant.",46,null],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,null],[10,"serialize_value","","Serialize a map value.",47,null],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,null],[10,"end","","Finish serializing a map.",47,null],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,null],[10,"end","","Finish serializing a struct.",48,null],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,null],[10,"end","","Finish serializing a struct variant.",49,null],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an `io::Write` or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for\nserializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the\ntuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content\nof the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content\nof the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the\nmap.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the\nstruct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the\ncontent of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,null],[10,"serialize_i8","","Serialize an `i8` value.",42,null],[10,"serialize_i16","","Serialize an `i16` value.",42,null],[10,"serialize_i32","","Serialize an `i32` value.",42,null],[10,"serialize_i64","","Serialize an `i64` value.",42,null],[10,"serialize_u8","","Serialize a `u8` value.",42,null],[10,"serialize_u16","","Serialize a `u16` value.",42,null],[10,"serialize_u32","","Serialize a `u32` value.",42,null],[10,"serialize_u64","","Serialize a `u64` value.",42,null],[10,"serialize_f32","","Serialize an `f32` value.",42,null],[10,"serialize_f64","","Serialize an `f64` value.",42,null],[10,"serialize_char","","Serialize a character.",42,null],[10,"serialize_str","","Serialize a `&amp;str`.",42,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,null],[10,"serialize_some","","Serialize a `Some(T)` value.",42,null],[10,"serialize_unit","","Serialize a `()` value.",42,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",42,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,null],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",42,null],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",42,null],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_element`, then a call to `end`.",42,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",42,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",42,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",42,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[11,"collect_seq","","Collect an iterator as a sequence.",42,null],[11,"collect_map","","Collect an iterator as a map.",42,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",33,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",33,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",33,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,null],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",33,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a\nparticular number of elements.",33,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",33,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct\nfield.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",33,null],[14,"forward_to_deserialize","","Helper macro when implementing the `Deserializer` part of a new data format\nfor Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_json"] = {"doc":"# Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or\ndeserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO\nstream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent\nany valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IteratorRead","serde_json::de","JSON input source that reads from an iterator of bytes.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually\n&quot;specialized&quot; for iterating over &amp;[u8]. Once feature(specialization) is\nstable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input\nsources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_iter","","Creates a JSON deserializer from a `std::iter::Iterator`.",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&amp;[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&amp;str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",1,null],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,null],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json\ninput sources.",2,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",2,null],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or\ndeserializing JSON data.",null,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"errorimpl"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map&#39;s entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map&#39;s entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map&#39;s entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map&#39;s keys.",null,null],[3,"Values","","An iterator over a serde_json::Map&#39;s values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.\nThis enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",4,null],[13,"Occupied","","An occupied Entry.",4,null],[11,"new","","Makes a new empty Map.",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",5,null],[11,"get","","Returns a reference to the value corresponding to the key.",5,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",5,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",5,null],[11,"insert","","Inserts a key-value pair into the map.",5,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",5,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place\nmanipulation.",5,null],[11,"len","","Returns the number of elements in the map.",5,null],[11,"is_empty","","Returns true if the map contains no elements.",5,null],[11,"iter","","Gets an iterator over the entries of the map.",5,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",5,null],[11,"keys","","Gets an iterator over the keys of the map.",5,null],[11,"values","","Gets an iterator over the values of the map.",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"fmt","","",5,null],[11,"serialize","","",5,null],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",5,null],[11,"key","","Returns a reference to this entry&#39;s key.",4,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",4,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",4,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",6,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key, and returns a\nmutable reference to it.",6,null],[11,"key","","Gets a reference to the key in the entry.",7,null],[11,"get","","Gets a reference to the value in the entry.",7,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",7,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",7,null],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`&#39;s key, and returns\nthe entry&#39;s old value.",7,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null],[11,"len","","",8,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"len","","",9,null],[11,"into_iter","","",5,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"len","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"len","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null],[11,"len","","",12,null],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `&quot;`",13,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",13,null],[13,"Solidus","","An escaped solidus `/`",13,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",13,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",13,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",13,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",13,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",13,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as\n`\\u00XX` where `XX` are two hex characters)",13,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO\nstream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",14,null],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",14,null],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",14,null],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",14,null],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",14,null],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",14,null],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",14,null],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",14,null],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",14,null],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",14,null],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",14,null],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",14,null],[11,"begin_string","","Called before each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",14,null],[11,"end_string","","Called after each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",14,null],[11,"write_string_fragment","","Writes a string fragment that doesn&#39;t need any escaping to the\nspecified writer.",14,null],[11,"write_char_escape","","Writes a character escape code to the specified writer.",14,null],[11,"begin_array","","Called before every array.  Writes a `[` to the specified\nwriter.",14,null],[11,"end_array","","Called after every array.  Writes a `]` to the specified\nwriter.",14,null],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to\nthe specified writer.",14,null],[11,"end_array_value","","Called after every array value.",14,null],[11,"begin_object","","Called before every object.  Writes a `{` to the specified\nwriter.",14,null],[11,"end_object","","Called after every object.  Writes a `}` to the specified\nwriter.",14,null],[11,"begin_object_key","","Called before every object key.",14,null],[11,"end_object_key","","Called after every object key.  A `:` should be written to the\nspecified writer by either this method or\n`begin_object_value`.",14,null],[11,"begin_object_value","","Called before every object value.  A `:` should be written to\nthe specified writer by either this method or\n`end_object_key`.",14,null],[11,"end_object_value","","Called after every object value.",14,null],[11,"new","","Creates a new JSON serializer.",15,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",15,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",15,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",15,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",17,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",17,null],[11,"end_array","","",17,null],[11,"begin_array_value","","",17,null],[11,"end_array_value","","",17,null],[11,"begin_object","","",17,null],[11,"end_object","","",17,null],[11,"begin_object_key","","",17,null],[11,"begin_object_value","","",17,null],[11,"end_object_value","","",17,null],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent\nany valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get`\nand `get_mut` methods of `Value`.",null,null],[8,"ToJson","","Representation of any serializable data as a `serde_json::Value`.",null,null],[10,"to_json","","Represent `self` as a `serde_json::Value`. Note that `Value` is not a\nJSON string. If you need a string, use `serde_json::to_string` instead.",18,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"get","","Index into a JSON array or map. A string index can be used to access a\nvalue in a map, and a usize index can be used to access an element of an\narray.",0,null],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to\naccess a value in a map, and a usize index can be used to access an\nelement of an array.",0,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",0,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",0,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",0,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",0,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",0,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,null],[11,"is_i64","","Returns true if the `Value` is a number that can be represented by i64.",0,null],[11,"is_u64","","Returns true if the `Value` is a number that can be represented by u64.",0,null],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,null],[11,"as_i64","","If the `Value` is a number, represent it as i64 if possible.\nReturns None otherwise.",0,null],[11,"as_u64","","If the `Value` is a number, represent it as u64 if possible.\nReturns None otherwise.",0,null],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible.\nReturns None otherwise.",0,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",0,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",0,null],[11,"pointer","","Looks up a value by a JSON Pointer.",0,null],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to\nthat value.",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or\n`value[&quot;k&quot;]`.",0,null],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or\n`value[&quot;k&quot;] = ...`.",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",0,null],[11,"deserialize_option","","",0,null],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,null],[11,"deserialize_bool","","",0,null],[11,"deserialize_u8","","",0,null],[11,"deserialize_u16","","",0,null],[11,"deserialize_u32","","",0,null],[11,"deserialize_u64","","",0,null],[11,"deserialize_i8","","",0,null],[11,"deserialize_i16","","",0,null],[11,"deserialize_i32","","",0,null],[11,"deserialize_i64","","",0,null],[11,"deserialize_f32","","",0,null],[11,"deserialize_f64","","",0,null],[11,"deserialize_char","","",0,null],[11,"deserialize_str","","",0,null],[11,"deserialize_string","","",0,null],[11,"deserialize_unit","","",0,null],[11,"deserialize_seq","","",0,null],[11,"deserialize_seq_fixed_size","","",0,null],[11,"deserialize_bytes","","",0,null],[11,"deserialize_byte_buf","","",0,null],[11,"deserialize_map","","",0,null],[11,"deserialize_unit_struct","","",0,null],[11,"deserialize_tuple_struct","","",0,null],[11,"deserialize_struct","","",0,null],[11,"deserialize_struct_field","","",0,null],[11,"deserialize_tuple","","",0,null],[11,"deserialize_ignored_any","","",0,null],[11,"clone","serde_json","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"is_i64","","Returns `true` if the number can be represented as `i64`.",19,null],[11,"is_u64","","Returns `true` if the number can be represented as `u64`.",19,null],[11,"is_f64","","Returns `true` if the number can be represented as `f64`.",19,null],[11,"as_i64","","Returns the number represented as `i64` if possible, or else `None`.",19,null],[11,"as_u64","","Returns the number represented as `u64` if possible, or else `None`.",19,null],[11,"as_f64","","Returns the number represented as `f64` if possible, or else `None`.",19,null],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON\nnumbers.",19,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"serialize","","",19,null],[11,"deserialize","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",19,null],[11,"deserialize_bool","","",19,null],[11,"deserialize_u8","","",19,null],[11,"deserialize_u16","","",19,null],[11,"deserialize_u32","","",19,null],[11,"deserialize_u64","","",19,null],[11,"deserialize_i8","","",19,null],[11,"deserialize_i16","","",19,null],[11,"deserialize_i32","","",19,null],[11,"deserialize_i64","","",19,null],[11,"deserialize_f32","","",19,null],[11,"deserialize_f64","","",19,null],[11,"deserialize_char","","",19,null],[11,"deserialize_str","","",19,null],[11,"deserialize_string","","",19,null],[11,"deserialize_unit","","",19,null],[11,"deserialize_option","","",19,null],[11,"deserialize_seq","","",19,null],[11,"deserialize_seq_fixed_size","","",19,null],[11,"deserialize_bytes","","",19,null],[11,"deserialize_byte_buf","","",19,null],[11,"deserialize_map","","",19,null],[11,"deserialize_unit_struct","","",19,null],[11,"deserialize_newtype_struct","","",19,null],[11,"deserialize_tuple_struct","","",19,null],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,null],[11,"deserialize_tuple","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_ignored_any","","",19,null],[11,"from","","",19,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from an iterator of bytes.",20,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"peek","","",20,null],[11,"discard","","",20,null],[11,"position","","",20,null],[11,"peek_position","","",20,null],[11,"parse_str","","",20,null],[11,"parse_str_raw","","",20,null],[11,"new","","Create a JSON input source to read from a slice of bytes.",21,null],[11,"next","","",21,null],[11,"peek","","",21,null],[11,"discard","","",21,null],[11,"position","","",21,null],[11,"peek_position","","",21,null],[11,"parse_str","","",21,null],[11,"parse_str_raw","","",21,null],[11,"new","","Create a JSON input source to read from a UTF-8 string.",22,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"peek","","",22,null],[11,"discard","","",22,null],[11,"position","","",22,null],[11,"peek_position","","",22,null],[11,"parse_str","","",22,null],[11,"parse_str_raw","","",22,null],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[8,"ToJson"],[3,"Number"],[3,"IteratorRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"fmt","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"clone","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"cmp","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed\nright-to-left and left-to-right text.  It is written in safe Rust, compatible with the\ncurrent stable release.","items":[[3,"BidiInfo","unicode_bidi","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text.\nIf a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property **Bidi_Class**, also known as\nthe *bidirectional character type*.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the `bidi_class` function is based on.",null,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition&#39;s characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition&#39;s characters.",null,null],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,null],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,null],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,null],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,null]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement\n`ToSocketAddrs for (Host&lt;S&gt;, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL&#39;s scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as &#39;.&#39; dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"cmp","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",2,null],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"clone","","",0,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",0,null],[11,"to_socket_addrs","","",0,null],[11,"next","","",5,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).",1,null],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,null],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"drop","","",7,null],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == &quot;/&quot;`.",7,null],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty,\nexcept if these was only one segment to begin with.",7,null],[11,"pop","","Remove the last segment of this URL’s path.",7,null],[11,"push","","Append the given segment at the end of this URL’s path.",7,null],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[0,"form_urlencoded","","Parser and serializer for the [`application/x-www-form-urlencoded` syntax](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow&lt;str&gt;`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The [`application/x-www-form-urlencoded` serializer](\nhttps://url.spec.whatwg.org/#concept-urlencoded-serializer).",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax\ninto a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The [`application/x-www-form-urlencoded` byte serializer](\nhttps://url.spec.whatwg.org/#concept-urlencoded-byte-serializer).",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,null],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,null],[11,"next","","",10,null],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow&lt;str&gt;`.",10,null],[11,"next","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"as_mut_string","url","",13,null],[11,"finish","","",13,null],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer\nfor a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,null],[11,"append_pair","","Serialize and append a name/value pair.",14,null],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,null],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[0,"percent_encoding","url","",null,null],[3,"SIMPLE_ENCODE_SET","url::percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on &#39;/&#39;-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points.\nShould return true for all non-ASCII bytes.",15,null],[11,"clone","","",16,null],[11,"contains","","",16,null],[11,"clone","","",17,null],[11,"contains","","",17,null],[11,"clone","","",18,null],[11,"contains","","",18,null],[11,"clone","","",19,null],[11,"contains","","",19,null],[11,"clone","","",20,null],[11,"contains","","",20,null],[11,"clone","","",21,null],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"fmt","","",21,null],[11,"clone","","",22,null],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",22,null],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",22,null],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",22,null],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,null],[11,"clone","","",23,null],[11,"base_url","","Change the base URL",23,null],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",23,null],[11,"parse","","Parse an URL string with the configuration so far.",23,null],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",8,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,null],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,null],[11,"into_string","","Return the serialization of this URL.",8,null],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,null],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the &#39;:&#39; delimiter.",8,null],[11,"has_authority","","Return whether the URL has an &#39;authority&#39;,\nwhich can contain a username, password, host, and port number.",8,null],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.",8,null],[11,"username","","Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.",8,null],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,null],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,null],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,null],[11,"host","","Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA.",8,null],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,null],[11,"port","","Return the port number for this URL, if any.",8,null],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,null],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,null],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with &#39;/&#39;.\nFor other URLs, this starts with a &#39;/&#39; slash\nand continues with slash-separated path segments.",8,null],[11,"path_segments","","Unless this URL is cannot-be-a-base,\nreturn an iterator of &#39;/&#39; slash-separated path segments,\neach as a percent-encoded ASCII string.",8,null],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,null],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.",8,null],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,null],[11,"set_fragment","","Change this URL’s fragment identifier.",8,null],[11,"set_query","","Change this URL’s query string.",8,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.",8,null],[11,"set_path","","Change this URL’s path.",8,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,null],[11,"set_port","","Change this URL’s port number.",8,null],[11,"set_host","","Change this URL’s host.",8,null],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,null],[11,"set_password","","Change this URL’s password.",8,null],[11,"set_username","","Change this URL’s username.",8,null],[11,"set_scheme","","Change this URL’s scheme.",8,null],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",8,null],[11,"to_socket_addrs","","",8,null],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"cmp","","",8,null],[11,"partial_cmp","","",8,null],[11,"hash","","",8,null],[11,"as_ref","","",8,null],[11,"drop","","",13,null],[14,"define_encode_set","","Define a new struct\nthat implements the [`EncodeSet`](percent_encoding/trait.EncodeSet.html) trait,\nfor use in [`percent_decode()`](percent_encoding/fn.percent_encode.html)\nand related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"UrlQuery"],[3,"Serializer"],[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[11,"description","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"nil","","The &#39;nil UUID&#39;.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,null],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,null],[11,"get_version","","Returns the version of the `Uuid`.",3,null],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of 32 hexadecimal digits.",3,null],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of hexadecimal digits separated into groups with a hyphen.",3,null],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of the UUID as a full URN string.",3,null],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,null],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
